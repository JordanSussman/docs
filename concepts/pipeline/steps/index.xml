<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vela â€“ Steps</title>
    <link>https://go-vela.github.io/docs/concepts/pipeline/steps/</link>
    <description>Recent content in Steps on Vela</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://go-vela.github.io/docs/concepts/pipeline/steps/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Concepts: Commands</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/commands/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;commands&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to provide execution instructions to run inside the container.&lt;/p&gt;

&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: build
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+   commands:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+     - go test ./...
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+     - go build
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step.
&lt;/div&gt;


&lt;p&gt;Using the above example, the provided commands are converted to a simple shell script that looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; -e

go &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt; ./...

go build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In turn, the above shell script is executed as the Docker entrypoint for the container:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker run --entrypoint&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;build.sh golang&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Concepts: Detach</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/detach/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/detach/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;detach&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to run the container in a detached (headless) state.&lt;/p&gt;

&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: test
    image: golang
    commands:
      - go test ./...

  - name: build
    image: golang
    commands:
      - go build

  - name: run
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    detach: true
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - ./main -http=:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step and finally run the &lt;code&gt;run&lt;/code&gt; step.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Concepts: Entrypoint</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/entrypoint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/entrypoint/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;entrypoint&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to provide the command to execute inside the container.&lt;/p&gt;

&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
   template: false

steps:
  - name: test
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    entrypoint: /usr/local/go/bin/go
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go test ./...

  - name: build
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    entrypoint: /usr/local/go/bin/go
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Concepts: Environment</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/environment/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;environment&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to provide variables injected into the container environment.&lt;/p&gt;

&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: test
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    environment:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      CGO_ENABLED: &amp;#39;0&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      GOOS: linux
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      GOARCH: amd64
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go test ./...

  - name: build
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    environment:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      CGO_ENABLED: &amp;#39;0&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      GOOS: linux
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      GOARCH: amd64
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step.
&lt;/div&gt;


&lt;h2 id=&#34;defaults&#34;&gt;Defaults&lt;/h2&gt;



&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Tip:&lt;/h4&gt;
Full list is available in the &lt;a href=&#34;https://go-vela.github.io/docs/docs/reference/environment/&#34;&gt;environment reference&lt;/a&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Concepts: Image</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/image/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;image&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to provide the &lt;a href=&#34;https://docs.docker.com/engine/docker-overview/#images&#34; target=&#34;_blank&#34;&gt;Docker image&lt;/a&gt; used to create the ephemeral container.&lt;/p&gt;



&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

All Vela steps will require an &lt;code&gt;image&lt;/code&gt; declaration to be provided.
&lt;/div&gt;


&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;

&lt;p&gt;Any valid &lt;a href=&#34;https://docs.docker.com/engine/docker-overview/#images&#34; target=&#34;_blank&#34;&gt;Docker image&lt;/a&gt; in any publicly accessible &lt;a href=&#34;https://docs.docker.com/registry/&#34; target=&#34;_blank&#34;&gt;Docker registry&lt;/a&gt; can be used for the container.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;image&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;golang&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;image&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;golang&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;latest&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;image&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;golang&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.12&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;image&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;library/golang&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.12&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;image&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;index.docker.io/library/golang&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;image&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;index.docker.io/library/golang&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1.12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

All the above images would pull an image from the &lt;a href=&#34;https://hub.docker.com/_/golang&#34; target=&#34;_blank&#34;&gt;golang Docker repository&lt;/a&gt;.
&lt;/div&gt;


&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: test
&lt;span style=&#34;color:#00a000&#34;&gt;+    image: golang
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go test ./...

  - name: build
&lt;span style=&#34;color:#00a000&#34;&gt;+    image: golang
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Concepts: Parameters</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/parameters/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;parameters&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to provide extra configuration variables for a plugin.&lt;/p&gt;

&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: plugin
    image: target/vela-docker:v0.1.0
    pull: always
&lt;span style=&#34;color:#00a000&#34;&gt;+    parameters:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      registry: index.docker.io
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      repo: index.docker.io/octocat/hello-world
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will add the following environment variables to the &lt;code&gt;plugin&lt;/code&gt; step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PARAMETER_REGISTRY=index.docker.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PARAMETER_REPO=index.docker.io/octocat/hello-world&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Concepts: Privileged</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/privileged/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/privileged/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;privileged&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to run the container with extra privileges.&lt;/p&gt;

&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: test
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    privileged: true
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go test ./...

  - name: build
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    privileged: true
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Concepts: Pull</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/pull/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/pull/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;pull&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to control how and when Vela will attempt to pull the &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/image/&#34;&gt;image&lt;/a&gt; provided for the step.&lt;/p&gt;



&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;This component has a default value of &lt;code&gt;not_present&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means Vela will always attempt to pull from its existing cache for images.&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;

&lt;p&gt;The following options are available to configure the component:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;always&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;attempt to pull the image even if it exists in the local cache&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;never&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;assumes the image already exists in the local cache&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not_present&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;only pull the image if it does not exist in the local cache&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;on_start&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;waits to pull the image until right before starting the container&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: test
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+   pull: always
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go test ./...

  - name: build
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+   pull: not_present
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Concepts: Ruleset</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/ruleset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/ruleset/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;ruleset&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to provide conditions to limit the execution of the container.&lt;/p&gt;

&lt;h2 id=&#34;simple&#34;&gt;Simple&lt;/h2&gt;

&lt;h4 id=&#34;fields&#34;&gt;Fields&lt;/h4&gt;

&lt;p&gt;The following fields are used to configure the simple version of the component:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;branch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;name of branch for build&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;pull request comment body&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;event&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;name of event for build&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;path to workspace files for build&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;repo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;name of repo for build&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;name of status for build&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;name of reference for build&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;target&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;name of deployment target for build&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;

&lt;p&gt;The following is an example of valid syntax for the simple version of the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: test
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    ruleset:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      branch: master
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      event: push
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go test ./...

  - name: build
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    ruleset:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      branch: master
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      event: push
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will limit the execution of the &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;build&lt;/code&gt; steps to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;builds with a branch of &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;builds with an event of &lt;code&gt;push&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;h2 id=&#34;advanced&#34;&gt;Advanced&lt;/h2&gt;

&lt;h4 id=&#34;fields-1&#34;&gt;Fields&lt;/h4&gt;

&lt;p&gt;The following fields are used to configure the advanced version of the component:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;enables continuing the build if the step fails&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;limits the step execution to all rules must match&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;matcher&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;matcher to use when evaluating the ruleset&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;operator to use when evaluating the ruleset&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unless&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;limits the step execution to no rules can match&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;syntax-1&#34;&gt;Syntax&lt;/h4&gt;

&lt;p&gt;The following is an example of valid syntax for the advanced version of the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: test
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    ruleset:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      if:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        branch: master
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        event: push
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go test ./...

  - name: build
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    ruleset:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      unless:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        branch: master
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        event: push
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;This pipeline will limit the execution of the &lt;code&gt;test&lt;/code&gt; step to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;builds with a branch of &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;builds with an event of &lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This pipeline will also limit the execution of the &lt;code&gt;build&lt;/code&gt; step to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;builds without a branch of &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;builds without an event of &lt;code&gt;push&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;


&lt;h2 id=&#34;ruleset-type-appendix&#34;&gt;Ruleset type Appendix&lt;/h2&gt;

&lt;h4 id=&#34;branch&#34;&gt;Branch&lt;/h4&gt;

&lt;p&gt;This rule type limits the execution of a step to &lt;strong&gt;matching build branches&lt;/strong&gt;. The below example will run a step if the build branch is &lt;code&gt;stage&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;ruleset&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;branch&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;stage&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;master&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;event&#34;&gt;Event&lt;/h4&gt;

&lt;p&gt;This rule type limits the execution of a step to &lt;strong&gt;matching build events&lt;/strong&gt;. The below example will run a step if the build event is &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;pull_request&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;ruleset&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;event&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;push&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;pull_request&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;status&#34;&gt;Status&lt;/h4&gt;

&lt;p&gt;This rule type limits the execution of a step to &lt;strong&gt;matching build statuses&lt;/strong&gt;. The below example will run a step if the build status is &lt;code&gt;failure&lt;/code&gt; or &lt;code&gt;success&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;ruleset&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;status&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;failure&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;success&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;tag&#34;&gt;Tag&lt;/h4&gt;

&lt;p&gt;This rule type limits the execution of a step to &lt;strong&gt;matching build references&lt;/strong&gt;. The below example will run a step if the build ref is &lt;code&gt;dev/*&lt;/code&gt; or &lt;code&gt;test/*&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;ruleset&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;tag&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;dev/&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;*,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;test/*&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;target&#34;&gt;Target&lt;/h4&gt;

&lt;p&gt;This rule type limits the execution of a step to &lt;strong&gt;matching build deployment targets&lt;/strong&gt;. The below example will run a step if the build target is &lt;code&gt;stage&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;ruleset&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;target&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;stage&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;production&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;path&#34;&gt;Path&lt;/h4&gt;

&lt;p&gt;This rule type limits the execution of a step to &lt;strong&gt;matching files changed in a repository&lt;/strong&gt;. The below example will run a step if file &lt;code&gt;README.md&lt;/code&gt;, any file of type &lt;code&gt;*.md&lt;/code&gt; in the root directory or any file in the &lt;code&gt;test/*&lt;/code&gt; directory has changed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;ruleset&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;path&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;README.md&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*.md&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test/*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;comment&#34;&gt;Comment&lt;/h4&gt;

&lt;p&gt;This rule type limits the execution of a step to &lt;strong&gt;matching a pull request comment&lt;/strong&gt;. This extends the ability to start new builds through interactions within a pull request. The below example will run a step if a &amp;ldquo;run build&amp;rdquo; comment is added to the bottom of a pull request.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;ruleset&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;event&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;comment&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;comment&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;run build&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Concepts: Secrets</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/secrets/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;secrets&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to provide sensitive variables injected into the container environment.&lt;/p&gt;



&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

Any variable provided with this declaration will be injected into the container as an upper case variable.
&lt;/div&gt;


&lt;h2 id=&#34;simple&#34;&gt;Simple&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the simple version of the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: test
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    secrets: [ git_username, git_password ]
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - echo &amp;#34;machine github.com&amp;#34; &amp;gt; .netrc
      - echo &amp;#34;login ${GIT_USERNAME}&amp;#34; &amp;gt; .netrc
      - echo &amp;#34;password ${GIT_PASSWORD}&amp;#34; &amp;gt; .netrc
      - go test ./...

  - name: build
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    secrets: [ git_username, git_password ]
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - echo &amp;#34;machine github.com&amp;#34; &amp;gt; .netrc
      - echo &amp;#34;login ${GIT_USERNAME}&amp;#34; &amp;gt; .netrc
      - echo &amp;#34;password ${GIT_PASSWORD}&amp;#34; &amp;gt; .netrc
      - go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;This pipeline will add the following environment variables to the &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;build&lt;/code&gt; steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GIT_USERNAME=&amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIT_PASSWORD=&amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This pipeline will also execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step.&lt;/p&gt;

&lt;/div&gt;


&lt;h2 id=&#34;advanced&#34;&gt;Advanced&lt;/h2&gt;

&lt;h4 id=&#34;fields&#34;&gt;Fields&lt;/h4&gt;

&lt;p&gt;The following fields are used to configure the advanced version of the component:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;source&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;secret from pipeline to rename for step&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;target&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;target name for variable to inject for step&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;

&lt;p&gt;The following is an example of valid syntax for the advanced version of the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

steps:
  - name: test
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    secrets:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      - source: username
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        target: git_username
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      - source: password
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        target: git_password
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - echo &amp;#34;machine github.com&amp;#34; &amp;gt; .netrc
      - echo &amp;#34;login ${GIT_USERNAME}&amp;#34; &amp;gt; .netrc
      - echo &amp;#34;password ${GIT_PASSWORD}&amp;#34; &amp;gt; .netrc
      - go test ./...

  - name: build
    image: golang
&lt;span style=&#34;color:#00a000&#34;&gt;+    secrets:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      - source: username
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        target: git_username
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      - source: password
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        target: git_password
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;    commands:
      - echo &amp;#34;machine github.com&amp;#34; &amp;gt; .netrc
      - echo &amp;#34;login ${GIT_USERNAME}&amp;#34; &amp;gt; .netrc
      - echo &amp;#34;password ${GIT_PASSWORD}&amp;#34; &amp;gt; .netrc
      - go build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

&lt;p&gt;This pipeline will add the following environment variables to the &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;build&lt;/code&gt; steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GIT_USERNAME=&amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIT_PASSWORD=&amp;lt;value&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This pipeline will also execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Concepts: Template</title>
      <link>https://go-vela.github.io/docs/concepts/pipeline/steps/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://go-vela.github.io/docs/concepts/pipeline/steps/template/</guid>
      <description>
        
        
        

&lt;p&gt;The &lt;code&gt;template&lt;/code&gt; component is a part of a &lt;a href=&#34;https://go-vela.github.io/docs/docs/concepts/pipeline/steps/&#34;&gt;step&lt;/a&gt; for Vela.&lt;/p&gt;

&lt;p&gt;This declaration allows you to provide the name of template to expand in the pipeline.&lt;/p&gt;

&lt;h2 id=&#34;fields&#34;&gt;Fields&lt;/h2&gt;

&lt;p&gt;The following fields are used to configure the component:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;unique identifier for the template in the pipeline&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vars&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;variables injected into the template&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;The following is an example of valid syntax for the component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;version: &amp;#34;1&amp;#34;

metadata:
  template: false

templates
  - name: template
    source: github.com/vela/atlas/cmd
    type: github

steps:
  - name: test
&lt;span style=&#34;color:#00a000&#34;&gt;+    template:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      name: template
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      vars:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        cmd: go test ./...
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;
  - name: build
&lt;span style=&#34;color:#00a000&#34;&gt;+    template:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      name: template
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+      vars:
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+        cmd: go build
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

This pipeline will execute the &lt;code&gt;test&lt;/code&gt; step first, then run the &lt;code&gt;build&lt;/code&gt; step.
&lt;/div&gt;


      </description>
    </item>
    
  </channel>
</rss>
