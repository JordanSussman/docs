
{ "results": [



    {
    "url": "https://go-vela.github.io/docs/usage/examples/secrets_external/",
    "display": "Usage/Examples/Secrets external",
    "title": "External Secrets",
    "content": "example yaml configuration for project requiring secrets to be used within step scenario user looking create pipeline that can integrate with private vault inject not pushing docker image registry. note: it assumed you have created secret vault_token the web interface cli. examples show using repository secrets. vela contains three types: repository, organization, shared. on organization shared, please see concepts documentation. steps following are being below: pull parameters plugins must stored base of as .vela.yml .vela.yaml recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:publishhelloworldimage:target/vela-docker:latestpull:alwaysparameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:# implicit definition.-name:vault_token-origin:name:privatevaultimage:target/secret-vault:latestpull:alwayssecrets:[vault_token]parameters:addr:vault.example.comauth_method:tokenusername:octocatitems:-source:secret/dockerpath:docker stages version:&#34;1&#34;worker:runtime:dockerstages:docker:steps:-name:publishhelloworldimage:target/vela-docker:latestpull:alwayssecrets:[docker_username,docker_password]parameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:# "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/go_modules/",
    "display": "Usage/Examples/Go modules",
    "title": "Go (With Modules)",
    "content": "example yaml configuration for project building go binary with modules. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image environment pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:installimage:golang:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-goget./...-name:testimage:golang:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-gotest./...-name:buildimage:golang:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-gobuild stages needs version:&#34;1&#34;stages:install:steps:-name:installimage:golang:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-goget./...test:needs:[install]steps:-name:testimage:golang:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-gotest./...build:needs:[install]steps:-name:buildimage:golang:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-gobuild "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/secrets_internal/",
    "display": "Usage/Examples/Secrets internal",
    "title": "Internal Secrets",
    "content": "example yaml configuration for project requiring secrets to be used within step scenario user looking create pipeline that can inject not placed into file. simple would producing docker image with username password. note: it assumed you have created docker_username docker_password the web interface cli. examples show using repository secrets. vela contains three secret types: repository, organization, shared. on organization shared, please see concepts documentation. steps following are being below: pull parameters plugins must stored base of as .vela.yml .vela.yaml recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:publishhelloworldimage:target/vela-docker:latestpull:alwayssecrets:[docker_username,docker_password]parameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:# implicit definition. definition only supported native type.-name:docker_username# declarative definition.-name:foo1key:vela/hello-world/docker_passwordengine:nativetype:repo stages version:&#34;1&#34;stages:docker:steps:-name:publishhelloworldimage:target/vela-docker:latestpull:alwayssecrets:[docker_username,docker_password]parameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:# "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/mongo/",
    "display": "Usage/Examples/Mongo",
    "title": "Mongo",
    "content": "example yaml configuration for project requiring mongo as pipeline dependency. scenario user looking to create that can integrate with an ephemeral instance. services block be used stages steps pipelines. uses basic configuration. the following concepts are being below: image pull commands note: must stored base of repository .vela.yml .vela.yaml it recommended pin image: versions production pipelines version: &#34;1&#34; services: name: mongo:latest pull: always steps: check status commands: sleeping help ensure service adequate time start sleep 15 &#34;mongo --host --eval &#34;{ ping: &#34;&#34; detach if you&rsquo;re more granular container you add flag within detach: true "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/postgres/",
    "display": "Usage/Examples/Postgres",
    "title": "Postgres",
    "content": "example yaml configuration for project requiring postgres as pipeline dependency. scenario user looking to create that can integrate with an ephemeral instance. services block be used stages steps pipelines. uses basic configuration. the following concepts are being below: image pull commands note: must stored base of repository .vela.yml .vela.yaml it recommended pin image: versions production pipelines version: &#34;1&#34; services: name: postgres:latest pull: always environment: postgres_user: admin postgres_db: vela steps: check status commands: sleeping help ensure service adequate time start sleep 15 psql -u -d -h tcp://postgres:5432 detach if you&rsquo;re more granular container you add flag within detach: true "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/redis/",
    "display": "Usage/Examples/Redis",
    "title": "Redis",
    "content": "example yaml configuration for project requiring redis as pipeline dependency. scenario user looking to create that can integrate with an ephemeral instance. services block be used stages steps pipelines. uses basic configuration. the following concepts are being below: image pull commands note: must stored base of repository .vela.yml .vela.yaml it recommended pin image: versions production pipelines version: &#34;1&#34; services: name: redis:latest pull: always steps: check status commands: sleeping help ensure service adequate time start sleep 15 redis-cli -h ping detach if you&rsquo;re more granular container you add flag within detach: true "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/route/",
    "display": "Usage/Examples/Route",
    "title": "Route",
    "content": "example yaml configuration for project requiring specific runtime platform. scenario user looking to create pipeline that can only run within docker runtime. note: work with your server administer understand what routes are available installation steps the following concepts being used below: worker platform image pull commands must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;worker:platform:dockersteps:-name:viewworkernameimage:alpine:latestpull:alwayscommands:-echo&#34;hello ${build_host} worker!!&#34; stages environment version:&#34;1&#34;worker:platform:dockerstages:docker:steps:-name:viewworkernameimage:alpine:latestpull:alwayscommands:-echo&#34;hello "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/rust_cargo/",
    "display": "Usage/Examples/Rust cargo",
    "title": "Rust (With Cargo)",
    "content": "example yaml configuration for project building rust binary with cargo. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:fetchimage:rust:latestpull:alwayscommands:-cargofetch--verbose--all-name:testimage:rust:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-cargotest--verbose--all-name:buildimage:rust:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-cargobuild--verbose--all stages needs version:&#34;1&#34;stages:fetch:steps:-name:fetchimage:rust:latestpull:alwayscommands:-cargofetch--verbose--alltest:needs:[fetch]steps:-name:testimage:rust:latestpull:alwayscommands:-cargotest--verbose--allbuild:needs:[fetch]steps:-name:buildimage:rust:latestpull:alwayscommands:-cargobuild--verbose--all "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/yaml/version/",
    "display": "Reference/Yaml/Version",
    "title": "Version",
    "content": "the version tag intended to be used order issue warnings for deprecated features breaking changes within yaml document. ---# document displaying using file.version:&#34;1&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/java_gradle/",
    "display": "Usage/Examples/Java gradle",
    "title": "Java (With Gradle)",
    "content": "example yaml configuration for project building java application with gradle. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image environment pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:installimage:gradle:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradledownloaddependencies-name:testimage:gradle:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradletest-name:buildimage:gradle:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradlebuild stages needs version:&#34;1&#34;stages:install:steps:-name:installimage:gradle:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradledownloaddependenciestest:needs:[install]steps:-name:testimage:gradle:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradletestbuild:needs:[install]steps:-name:buildimage:gradle:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradlebuild "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/java_maven/",
    "display": "Usage/Examples/Java maven",
    "title": "Java (With Maven)",
    "content": "example yaml configuration for project building java application with maven. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:installimage:maven:latestpull:alwayscommands:-mvninstall-name:testimage:maven:latestpull:alwayscommands:-mvntest-name:buildimage:maven:latestpull:alwayscommands:-mvnpackage stages needs version:&#34;1&#34;stages:install:steps:-name:installimage:maven:latestpull:alwayscommands:-mvninstalltest:needs:[install]steps:-name:testimage:maven:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-mvntestbuild:needs:[install]steps:-name:buildimage:maven:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-mvnpackage "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/yaml/metadata/",
    "display": "Reference/Yaml/Metadata",
    "title": "Metadata",
    "content": "the metadata tag intended to be used during compile phase signal how treat yaml document. ---# document displaying all available tags# their default state for process.metadata:template:falseclone:true tags required type description template bool enables compiling pipeline as template. clone injecting process. usage template: tip: learn write templates, see documentation. ---metadata:# value defaulted &#34;false&#34; if not explicitly provided by user.template:true clone: processclone:true "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/examples/node/",
    "display": "Usage/Examples/Node",
    "title": "Node",
    "content": "example yaml configuration for project building node application. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:installimage:node:latestpull:alwayscommands:-nodeinstall-name:lintimage:node:latestpull:alwayscommands:-nodetest-name:buildimage:node:latestpull:alwayscommands:-nodebuild stages needs version:&#34;1&#34;stages:install:steps:-name:installimage:node:latestpull:alwayscommands:-nodeinstalltest:needs:[install]steps:-name:testimage:node:latestpull:alwayscommands:-nodetestbuild:needs:[install]steps:-name:buildimage:node:latestpull:alwayscommands:-nodebuild "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/yaml/worker/",
    "display": "Reference/Yaml/Worker",
    "title": "Worker",
    "content": "the worker tag intended to be used route build specific pool of workers available with vela queue. ---# document displaying all tags# routing &#34;sm:docker&#34;.worker:flavor:smplatform:docker warning: routes are defined by system administrators during installation. know what for your installation, we recommend consulting administrators. tags required type description flavor string indicates worker. (i.e. sm, m, lg) platform docker, k8s) usage tip: see an example on how build. flavor: ---worker:# lg). if not specified# will scheduled generic &#34;vela&#34; queue.flavor:sm platform: k8s). queue.platform:docker "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/yaml/templates/",
    "display": "Reference/Yaml/Templates",
    "title": "Templates",
    "content": "the template tag intended to be used identify where retrieve templates during compiler phase of pipeline. ---# document displaying all required tags# pull from remote system.templates:-name:examplesource:github.com/go-vela/templates/example.ymltype:github tags type description name string indicates unique identifier for template. source path system. which version use. format language within file. usage tip: learn how write templates, see documentation name: templates:# identifier# then can step expand template.-name:example source: path# should always raw repository. by default pulled branch on repository# but overwritten adding &#34;@&#34; symbol path.source:github.com/go-vela/templates/example.yml type: use.type:github format: templates:-name:examplesource:github.com/go-vela/templates/example.ymltype:github# default# will &#34;go&#34; accepts following values: go, golang, starlarkformat:starlark "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/authentication/",
    "display": "Reference/Api/Authentication",
    "title": "Authentication",
    "content": "overview authentication for the vela api responsibility of client initiating request. each request requires token to be provided as an authorization http header. content header should using bearer &lt;token&gt; scheme. authorization: more information, you can visit swagger documentation. format tokens are based off json web (a.k.a. jwt) standard. broken down into distinct sections, separated by periods (.): metadata about type signing algorithm used payload data claims) providing additional information signature encoded string header, secret syntax header.payload.signature sample xxxxx.yyyyy.zzzzz jwt introduction curl -x get -h &#34;authorization: &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/install/",
    "display": "Reference/Cli/Install",
    "title": "Install",
    "content": "please keep mind your operating system (os) when referring to the installation instructions below. macos homebrew recommended method for installing vela cli on mac. add tap brew configuration go-vela/vela update taps install curl download binary -l https://github.com/go-vela/cli/releases/latest/download/vela_darwin_amd64.tar.gz tar zx copy $path sudo cp /usr/local/bin/ linux https://github.com/go-vela/cli/releases/latest/download/vela_linux_amd64.tar.gz windows utility must be installed before following command prompt https://github.com/go-vela/cli/releases/latest/download/vela_windows_amd64.tar.gz --output vela_windows_amd64.tar.gz unzip tarball xzvf c: system32/vela.exe powershell -outfile (powershell core) from source intended developers advanced users only. section assumes you have already setup golang. golang, review documentation. repo go get -d github.com/go-vela/cli change directory cd ${gopath}/src/github.com/go-vela/cli build release with -o releases/vela "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/yaml/services/",
    "display": "Reference/Yaml/Services",
    "title": "Services",
    "content": "the services tag intended to be used run applications alongside pipeline. ---# document displaying all required tags# postgres database for duration of pipeline.services:-name:postgresimage:postgres:latest tags type description name string unique identifier container pipeline image []string docker create an ephemeral pull declaration configure if when pulled environment map entrypoint commands execute inside ports list usage name: ---services:# pipeline.-name:postgres image: container.-image:postgres:latest pull: pulled.# by default, compiler will inject but accepts following values: always, never, no_present, on_start, -pull:always environment: variables injected into environment# using style syntax.-environment:db_name:vela---services:# array syntax.-environment:-db_name=vela entrypoint: container.-entrypoint:-some/path/sql-init.sql-/some/binary/postgres ports: pipeline.-ports:-&#34;8080:5432&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/yaml/steps/",
    "display": "Reference/Yaml/Steps",
    "title": "Steps",
    "content": "the steps tag intended to be used run sequential tasks pipeline. ---# document displaying all required tags# postgre database for duration of pipeline.steps:-name:helloworldimage:alpine:latestcommands:-echo&#34;hello, vela user&#34; tags type description name string unique identifier container image []string docker create ephemeral container. pull declaration configure if when pulled. secrets struct sensitive variables injected into environment. environment map ruleset conditions limit execution parameters extra configuration specific plugin. commands instructions inside template expand entrypoint execute detach detached (headless) state. volume mount volumes ulimits set user limits privileged with privileges. usage name: ---steps:# pipeline.-name:helloworld image: -image:alpine:latest pull: pulled.# by default, compiler will inject value not_present but# accepts following values: always, never, not_present, on_start-pull:always secrets: container# as upper case env. i.e. git_username=vela-secrets:[git_username]---steps:# git_username=&lt;secret_value&gt; -secrets:# source &#34;name:&#34; secret within the# parent &#34;secrets:&#34; yaml tag-source:username# target desired key accessible during# runtime.target:git_username environment: environment# using style syntax.-environment:db_name:vela---steps:# an array syntax.-environment:-db_name=vela ruleset: rules can branch build. comment request body. event path workspace files repo status reference deployment ---steps:-ruleset:# below step that would build# stage master.branch:[stage,master]---steps:-ruleset:# extends ability start new builds through interactions# request. it “run build”# added bottom request.comment:[&#34;run build&#34;]---steps:-ruleset:# push pull_request. available events are:# comment, push, pull_request, tag, deployment.event:[push,pull_request]---steps:-ruleset:# file readme.md, any *.md# root directory test/* has changed.path:[readme.md,&#34;*.md&#34;,&#34;test/*&#34;]---steps:-ruleset:# exists github# organization go-vela/docs repository.repo:[&#34;target/*&#34;,&#34;go-vela/docs&#34;]---steps:-ruleset:# build failure success.status:[failure,success]---steps:-ruleset:# ref dev/* test/*.tag:[dev/*,test/*]---steps:-ruleset:# production.# only compatible events.target:[dev/*,test/*] controls modify behavior evaluation: continue enables continuing fails. must match. matcher use evaluating ruleset. operator unless allow step# pipeline fails.continue:true---steps:-ruleset:# explicit way tell ruleset# master push.if:branch:masterevent:push---steps:-ruleset:# overwrite vela&#39;s default filepath instead evaluate regex. available# matchers are: filepath, regexp.matcher:regexp---steps:-ruleset:# &#34;and&#34; comparing rules. operators and, or.operator:or---steps:-ruleset:# not push.unless:branch:masterevent:push parameters: are parameter_&lt;tag_name&gt;. illustrating plugin needs fields:# parameters_registry=index.docker.io# parameters_repo=octocat/hello-world,go-vela/docs-parameters:registry:index.docker.iorepo:[go-vela/hello-world,go-vela/docs] commands: -entrypoint:-echo&#34;hello, world&#34; template: injection: vars ---steps:-template:# step. map# existing &#34;template&#34; tag.name:example---steps:-template:# template. any# primitive complex types but corresponding template# understand how those templates used.vars:tags:[latest,&#34;1.14&#34;,&#34;1.15&#34;]pull_policy:alwayscommands:test:&#34;go test ./...&#34;build:&#34;go ./...&#34; entrypoint: container.-entrypoint:-/bin/pwd-/bin/ls detach: similar &#34;services:&#34; throughout# pipeline.-detach:true volume: container.-volume:-source:/foo-source:/foodestination:/bar-source:/foodestination:/foobaraccess_mode:ro---steps:# container.-volume:[/foo,/foo:/bar,/foo:/foobar:ro] ulimits: -ulimits:-name:foosoft:1024-name:barsoft:1024hard:2048 privileged: -privileged:true "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/yaml/stages/",
    "display": "Reference/Yaml/Stages",
    "title": "Stages",
    "content": "the stages tag intended to be used parallelize one-to-many sets of step tasks. ---# document displaying all required tags# run two with one task parallel.stages:test:hello:-name:helloworldimage:alpine:latestcommands:-echo&#34;hello, vela user&#34;welcome:steps:-name:welcometovelaimage:alpine:latestcommands:-echo&#34;welcome vela!&#34; tags type description name string unique identifier for stage pipeline steps []string sequential execution instructions needs struct that must complete before starting current usage name: ---stages:# pipeline.welcome: steps: pipeline.welcome:# stage.steps: tip: more details on tags, see documentation ---stages:greeting:# one.needs:[greeting] "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/yaml/secrets/",
    "display": "Reference/Yaml/Secrets",
    "title": "Secrets",
    "content": "the secret tag intended to be used pull secrets from vela server execute plugins write external build volume. ---# document displaying all required tags# various types. secrets:# below implicit native definition. definition only supported for of repository type.-name:foo# declarative definitions.-name:foo1key:go-vela/docs/foo1engine:nativetype:repo-name:foo2key:go-vela/foo2engine:nativetype:org-name:foo3key:go-vela/admins/foo3engine:nativetype:shared# executing plugin.-origin:name:externalvaultsecretimage:target/secret-vault:latestparameters:addr:vault.company.comauth_method:tokenusername:velatoken:sometokenitems:-source:secret/velapath:user tags type description name string reference pipeline. key path fetch storage backend. engine backend from. origin struct declaration non-internal providers. name: ---secrets:# pipeline.-name:postgres key: tip: unique you need follows pattern ensure repo has proper authorization use secret. by type: // org shared -key:go-vela/docs/foo1# secret.-key:go-vela/foo1# secret.-key:go-vela/admins/foo1 engine: know what engines are available your installation, we recommend consulting system administrators. from, &#34;native&#34; signifies# provide it database. -engine:native backend.# default, can but accepts following values: repo, org, shared-type:repo origin: identifier container image []string docker create an ephemeral container. configure if when pulled. sensitive variables injected into environment. environment map ruleset conditions limit execution parameters extra configuration specific plugin. effort reduce duplicate documentation, see comparable step documentation learn how set details on behavior. "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/authentication/",
    "display": "Reference/Cli/Authentication",
    "title": "Authentication",
    "content": "overview authentication with the vela cli responsibility of client initiating request. each request requires server address. you can provide variable to three ways: configuration file environment flag recommended method for providing api address cli. default path be found $home/.vela/config.yml. log in: syntax login --api.addr &lt;vela url&gt; example https://vela-server.localhost confirm via browser prompt: open your complete (press enter confirm): generate update complete. continue save (existing config will overwritten): more information, visit documentation. variables configure vela_addr variable: export vela_addr=https://vela-server.localhost two prompts as stated above: it&rsquo;s add these terminal profile (~/.bashrc ~/.zshrc) flags "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/validate/",
    "display": "Reference/Cli/Validate",
    "title": "Validate",
    "content": "command has been moved to vela validate pipeline. for more information, please see the documentation "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/version/",
    "display": "Reference/Cli/Version",
    "title": "Version",
    "content": "command vela version sample section assumes you have already installed setup the cli. to install cli, please review installation documentation. authentication request response canonical: v0.7.0, major: 0, minor: 7, patch: metadata: architecture: amd64, builddate: 2021-02-01t15:40:21z, compiler: gc, gitcommit: 6225623858e09b7277f3d274d1ed75289a9eb549, goversion: go1.15.7, operatingsystem: darwin, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/build/add/",
    "display": "Api/Build/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;author&#34;: &#34;octokitty&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;event&#34;: &#34;push&#34;, &#34;message&#34;: &#34;first commit...&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;sender&#34;: &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;parent&#34;: &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: https://github.com/github/octocat&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/deployment/add/",
    "display": "Api/Deployment/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/deployments/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;ref&#34;: &#34;master&#34;, &#34;target&#34;: &#34;production&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/deployments/github/octocat&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;url&#34;: &#34;https://api.github.com/repos/github/octocat/deployments/1&#34;, &#34;user&#34;: &#34;octocat&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;task&#34;: &#34;deploy:vela&#34;, &#34;production&#34;, &#34;description&#34;: &#34;deployment from vela&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/hook/add/",
    "display": "Api/Hook/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/hooks/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;number&#34;: 1, &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;status&#34;: &#34;success&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat&#34; response &#34;id&#34;: &#34;repo_id&#34;: &#34;build_id&#34;: &#34;created&#34;: &#34;1563474076&#34;, &#34;error&#34;: &#34;&#34;, &#34;success&#34;, &#34;link&#34;: &#34;&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/repo/add/",
    "display": "Api/Repo/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. file &#34;owner&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/secret/add/",
    "display": "Api/Secret/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/secrets/:engine/:type/:org/:name parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: &#34;bar&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, null, &#34;type&#34;: &#34;repo&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/service/add/",
    "display": "Api/Service/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds/:build/services parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;number&#34;: 1, &#34;name&#34;: &#34;clone&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services&#34; response &#34;id&#34;: &#34;build_id&#34;: &#34;repo_id&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/step/add/",
    "display": "Api/Step/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds/:build/steps parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;number&#34;: 1, &#34;name&#34;: &#34;clone&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps&#34; response &#34;id&#34;: &#34;build_id&#34;: &#34;repo_id&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/user/add/",
    "display": "Api/User/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/users permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. file &#34;name&#34;: &#34;octokitty&#34;, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/users&#34; response &#34;id&#34;: 1, &#34;token&#34;: null, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/deployment/add/",
    "display": "Cli/Deployment/Add",
    "title": "Add",
    "content": "command vela add deployment &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, deployment_org repo repository vela_repo, deployment_repo ref branch, commit, tag vela_deployment, deployment_number target vela_target, deployment_target short vela_description, deployment_description task vela_task, deployment_task output format vela_output, deployment_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;https://api.github.com/repos/github/octocat/deployments/1&#34; was created "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/repo/add/",
    "display": "Cli/Repo/Add",
    "title": "Add",
    "content": "command vela add repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name link full url vela_link, repo_link branch default vela_branch, repo_branch clone vela_clone, repo_clone visibility access level required view vela_visibility, repo_visibility timeout max time allowed per build vela_timeout, repo_timeout private disables public vela_private, repo_private trusted elevates permissions builds vela_trusted, repo_trusted active enables/disables vela_active, repo_active event events trigger vela_events, repo_events output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response id: userid: org: name: fullname: github/octocat link: https://github.com/github/octocat clone: https://github.com/github/octocat.git branch: master timeout: 60 visibility: private: false trusted: active: true allowpull: allowpush: allowdeploy: allowtag: allowcomment: "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/secret/add/",
    "display": "Cli/Secret/Add",
    "title": "Add",
    "content": "command vela add secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. note on special characters: certain characters may require to encapsulate your with &quot; '. have be double escaped parameters the following are used configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name value vela_value, secret_value image build image(s) access vela_images, secret_images event event(s) vela_events, secret_events commands allows step vela_commands, secret_commands file secret(s) vela_file, secret_file output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo --value bar response &#34;foo&#34; was added advanced input from creating single-line multi-line using symbol. syntax @/path/to/file example @$home/tmp/secret.txt secrets multiple filename parameter. -f secret.yml single yaml document ---metadata:version:v1engine:nativesecrets:-org:octocatrepo:githubname:foovalue:bartype:repoimages:-golang:latestevents:-push-pull_request-org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:-golang:latestevents:-push-pull_request ---metadata:version:v1engine:nativesecrets:-org:githubrepo:octocatname:foovalue:bartype:repoimages:-golang:latestevents:-push-pull_request---metadata:version:v1engine:vaultsecrets:-org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:-golang:latestevents:-push-pull_request "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/starlark/anatomy/",
    "display": "Tutorials/Starlark/Anatomy",
    "title": "Anatomy",
    "content": "anatomy order to make starlark work with vela&rsquo;s templates functionality we did have few design decisions on behalf of the users. all must contain main function that returns pipeline illustrated below example file contains def main(ctx) data structure valid pipeline. main(ctx): return &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: &#39;name&#39;: &#39;build&#39;, &#39;image&#39;: golang:latest, &#39;commands&#39;: &#39;go build&#39;, test&#39;, }, ], context used by compiler pass information template will inject user variables defined parent compile time platform variables. both sets are injected into within dictionary structure. syntax: ctx['vela']['&lt;resource&gt;']['&lt;name&gt;'] repo ctx[&#34;vela&#34;][&#34;repo&#34;][&#34;full_name&#34;] &#34;go build %s&#34; %, repo, ctx['vars'][&lt;name&gt;] image ctx[&#39;vars&#39;][&#39;image&#39;] image, "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/artifactory/",
    "display": "Registry/Pipeline/Artifactory",
    "title": "Artifactory",
    "content": "description plugin enables you to manage artifacts artifactory vela pipeline. source code: https://github.com/go-vela/vela-artifactory registry: https://hub.docker.com/r/target/vela-artifactory usage note: users should refrain from using latest as the tag for docker image. it recommended use semantically versioned instead. sample of copying an artifact: steps:-name:copy_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:copypath:libs-snapshot-local/foo.txttarget:libs-snapshot-local/bar.txturl:http://localhost:8081/artifactory deleting steps:-name:delete_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:deletepath:libs-snapshot-local/foo.txturl:http://localhost:8081/artifactory setting properties on steps:-name:set_properties_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:set-proppath:libs-snapshot-local/foo.txtprops:-name:singlevalue:foo-name:multiplevalues:-bar-bazurl:http://localhost:8081/artifactory uploading steps:-name:upload_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:uploadpath:libs-snapshot-local/sources:-foo.txt-target/*.jar-dist/**/*.jsurl:http://localhost:8081/artifactory pretending upload steps: name: upload_artifacts image: target/vela-artifactory:latest pull: always parameters: action: dry_run: true path: libs-snapshot-local/ sources: foo.txt target/*.jar dist/**/*.js url: http://localhost:8081/artifactory docker-promote steps:-name:docker_promote_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:docker-promotetarget_repo:libs-snapshot-localdocker_registry:octocat/hello-worldtag:latesttarget_docker_registry:octocat/hello-worldtarget_tags:&#34;${build_commit:0:8}&#34; secrets configuring sensitive information your pipeline plain text. internal can substitute these values at runtime: copy_artifacts secrets: artifactory_username, artifactory_password copy libs-snapshot-local/foo.txt target: libs-snapshot-local/bar.txt username: octocat password: supersecretpassword example will add step environment variables: artifactory_username=&lt;value&gt; artifactory_password=&lt;value&gt; external accepts following files authentication: parameter volume configuration api_key /vela/parameters/artifactory/api_key, /vela/secrets/artifactory/api_key password /vela/parameters/artifactory/password, /vela/secrets/artifactory/password username /vela/parameters/artifactory/username, /vela/secrets/artifactory/username read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. are used configure name required default action perform against n/a parameter_action artifactory_action api key communication with false parameter_dry_run artifactory_dry_run dry_run parameter_api_key artifactory_api_key log_level log level info parameter_log_level artifactory_log_level parameter_password url instance communicate parameter_url artifactory_url user parameter_username artifactory_username flat removing directory hierarchy parameter_flat artifactory_flat path artifact(s) parameter_path artifactory_path recursive sub-directories parameter_recursive artifactory_recursive target parameter_target artifactory_target delete target_repo registry containing image parameter_target_repo artifactory_target_repo docker_registry parameter_docker_registry artifactory_docker_registry target_docker_registry parameter_target_docker_registry artifactory_target_docker_registry promoting parameter_tag artifactory_tag target_tags final tags after promotion parameter_target_tags artifactory_target_tags instead moving parameter_copy artifactory_copy promote_props promoted artifact parameter_promote_props artifactory_promote_props set-prop props parameter_props artifactory_props include_dirs including parameter_include_dirs artifactory_include_dirs parameter_regexp artifactory_regexp regexp sources regular expression list parameter_sources artifactory_sources template coming soon! troubleshooting start by tuning logs being displayed: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/authenticate/",
    "display": "Docs/Usage/Authenticate",
    "title": "Authenticate",
    "content": "warning these docs assume you have vela running. ui navigate to your deployed instance follow the oauth workflow presented on web interface. cli please see authentication reference. if not yet installed cli, install reference first. api sdk "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/badge/",
    "display": "Docs/Usage/Badge",
    "title": "Badges",
    "content": "note: these docs assume you have vela running. how to get your badge the server has an endpoint that will return svg for default branch of repo. syntax https://&lt;vela server&gt;/badge/&lt;org&gt;/&lt;repo&gt;/status.svg example https://vela-server.localhost/badge/octocat/hello-world/status.svg addition can specify which want by supplying ?branch= query parameter url. server&gt;/badge/&lt;org&gt;/&lt;repo&gt;/status.svg?branch=&lt;branch name&gt; https://vela-server.localhost/badge/octocat/hello-world/status.svg?branch=not_master embedding markdown embed formatted file, follow example: [![build status](https://&lt;vela server&gt;/badge/&lt;org&gt;/&lt;repo&gt;/status.svg)](https://&lt;vela server&gt;/badge/&lt;org&gt;/&lt;repo&gt;) status](https://vela-server.localhost/badge/octocat/hello-world/status.svg)](https://vela-server.localhost/badge/octocat/hello-world) "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/tutorials/bash/",
    "display": "Plugins/Tutorials/Bash",
    "title": "Bash",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from bash documentation: the gnu project&rsquo;s shell. bourne an sh-compatible shell incorporates useful features korn (ksh) (csh). it intended conform ieee posix p1003.2/iso 9945.2 tools standard. offers functional improvements over sh for both programming interactive use. addition, most scripts can run by without modification. code plugin using bash, we&rsquo;ll need first decide what task want accomplish. example, we&rsquo;re going script runs curl command provided input: #!/usr/bin/env import method parameter environment method=${parameter_method} body body=${parameter_body} url url=${parameter_url} send request input -x &#34;${method}&#34; -d &#34;${body}&#34; &#34;${url}&#34; example of section go-vela/vela-tutorials repository. image once have executable needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup when executed: fromalpinerun apk add --update --no-cache ca-certificates curlcopy vela-sample.sh /bin/vela-sample.shentrypoint [&#34;bash&#34;, &#34;/bin/vela-sample.sh&#34;] target/vela-sample docker publishing order pipeline, make sure build publish registry: -t target/vela-sample:bash push has added benefit enabling others community consume your plugin! troubleshooting verify performs desired executed locally via line: --rm -e parameter_body=&#34;this sample vela written with bash&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplebashpluginimage:target/vela-sample:bashpull:alwaysparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/build/",
    "display": "Concepts/System/Build",
    "title": "Build",
    "content": "the build component part of core system components for vela. defined as single, ephemeral execution pipeline. comprised one many services steps that contain instructions to execute from typically created hook triggered by repo source control provider. fields following make up component: name type description author string commit branch base_ref sha clone full url int64 unix timestamp when was deploy environment targeted deployment distribution operating executed on email enqueued published queue error message received during time event finished completed host hostname id unique identifier link navigatable number int parent previous ref reference repo_id runtime with sender started status signifies end condition title stored configured vela backend builds table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/admin/build/",
    "display": "Api/Admin/Build",
    "title": "Build",
    "content": "endpoint get /api/v1/admin/builds permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/builds&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: &#34;number&#34;: 1, &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;running&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474204, &#34;created&#34;: &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;second commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;ed95dcc0687c&#34;, &#34;runtime&#34;: &#34;distribution&#34;: &#34;&#34; }, 1563474077, 1563474076, &#34;first &#34;82823eb770b0&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/docker/",
    "display": "Docs/Usage/Docker",
    "title": "Building Docker Images",
    "content": "we assume you understand how to build run docker images. if need assistance on get started with docker; recommend see their documentation for getting set up. vela runs all workloads within containers. which essentially gives us two core different ways images: without elevated daemon access both options have disadvantages advantages, so encourage administrators weigh the pros/cons of they want images cluster. here are some resources can use while researching available tools: what buildkit it for? kaniko tools comparison makisu building an image most secure pattern not allowing any workers there plugin those vela-kaniko vela-makisu customers read tool comparisons before picking technology in-depth examples either utility respective pages. simple example provided below: version:&#34;1&#34;steps:-name:buildandpublishwithkanikoimage:target/vela-kaniko:latestpull:alwaysparameters:registry:index.docker.iorepo:index.docker.io/octocat/hello-world-name:buildandpublishwithmakisuimage:target/vela-makisu:latestpull:alwaysparameters:registry:index.docker.iotag:index.docker.io/octocat/hello-worldpushes:[index.docker.io] allowed as long required allow list worker. it&rsquo;s important work your administrator stand instances was deployed support. supported vela-docker version:&#34;1&#34;steps:-name:buildandpublishwithdocker&#39;s image: target/vela-docker:latest pull: always parameters: registry: index.docker.io tags: index.docker.io/octocat/hello-world name: publish docker&#39;sbuildkitimage:target/vela-docker:latestenvironment:docker_buildkit=0pull:alwaysparameters:registry:index.docker.iotags:[index.docker.io/octocat/hello-world] additional container securely kubernetes why rootless hard? introducing "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/build/cancel/",
    "display": "Api/Build/Cancel",
    "title": "Cancel",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build/cancel permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper 404 that server was unable to cancel build 500 there an error trying sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/cancel&#34; response &#34;canceled github/octocat/36&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/build/cancel/",
    "display": "Cli/Build/Cancel",
    "title": "Cancel",
    "content": "command vela cancel build &lt;parameters...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, build_org repo repository vela_repo, build_repo number vela_build, build_number output format vela_output, build_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response canceled github/octocat/1 "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/captains_log/",
    "display": "Registry/Pipeline/Captains log",
    "title": "Captain's Log",
    "content": "overview the captain&rsquo;s log plugin enables ability to manage release logs through slack vela pipeline. source code: https://github.com/target/captains-log registry: https://hub.docker.com/r/target/captains-log usage basic steps:-name:captains-logimage:target/captains-log:1pull:alwayssecrets:[github_token,slack_url]parameters:github_owner:targetgithub_repo:captains-loggithub_tag_id:&#34;v([0-9]+-release)$&#34;enterprise_host:https://git.myteam.comjira_team_domain:myteamnamespace utilize teams organization: steps:-name:captains-logimage:target/captains-log:1pull:alwayssecrets:[github_token,slack_url]parameters:github_owner:targetgithub_repo:captains-loggithub_tag_id:&#34;v([0-9]+-release)$&#34;enterprise_host:https://git.myteam.comjira_team_domain:myteamnamespaceteams:-name:team1color:&#34;#ffdc18&#34;emoji:&#34;✨&#34;mentions:&#34;&lt;@person1&gt; &lt;@person2&gt;&#34;issuetracking:jira:projects:-team1-team1subgroup-name:team2color:&#34;#f48642&#34;emoji:&#34;🔥&#34;mentions:&#34;&lt;@person3&gt;&#34;issuetracking:jira:projects:-team2 secrets users should refrain from configuring sensitive information their pipeline plain text. accepts following parameters for authentication: parameter environment variable configuration github_token slack_token slack_url can use substitute these values at runtime: steps: name: captains-log image: target/captains-log:1 pull: always secrets: github_token, parameters: github_owner: target github_repo: github_tag_id: &#34;v([0-9]+-release)$&#34; enterprise_host: https://git.myteam.com jira_team_domain: myteamnamespace github_token: supersecrettoken slack_url: https://hooks.slack.com/services/super/secret/url example will add step as variables: github_token= slack_url= more on options, visit documentation. https://target.github.io/captains-log/#/configuration/ "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/repo/chown/",
    "display": "Api/Repo/Chown",
    "title": "Chown",
    "content": "endpoint patch /api/v1/repos/:org/:repo/chown parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/chown&#34; response github/octocat changed owner "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/repo/chown/",
    "display": "Cli/Repo/Chown",
    "title": "Chown",
    "content": "command vela chown repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;github/octocat&#34; changed owner "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/commands/",
    "display": "Pipeline/Steps/Commands",
    "title": "Commands",
    "content": "the commands component part of step for vela. declaration allows you to provide execution instructions run inside container. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: build image: golang commands: go test ./... pipeline will execute first, then step. using above example, provided are converted simple shell script that looks like: #!/bin/sh set -e turn, executed as docker entrypoint container: --entrypoint=build.sh "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/pipeline/compile/",
    "display": "Api/Pipeline/Compile",
    "title": "Compile",
    "content": "endpoint post /api/v1/pipelines/:org/:repo/compile parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider output format compiled pipeline configuration permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve compile templates 401 user does not have proper 404 500 system error while retrieving compiling sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x get -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat/expand&#34; response notice, when step fields such as image commands will be arranged alphabetical order. version:&#34;1&#34;secrets:-name:go_modulekey:github/octocat/template_secretengine:nativetype:reposteps:-commands:-govet./...&amp;&amp;gitdiff--exit-code;code=$?;gitcheckout--.;(exit$code)-gofmt./...&amp;&amp;gitdiff--exit-code;code=$?;gitcheckout--.;(exit$code)image:golang:latestname:go_validatepull:not_present-commands:-gotest./...image:golang:latestname:go_testpull:not_present-commands:-gobuild-a-ldflags&#39;-extldflags &#34;-static&#34;&#39;-orelease/heyvela{$go_module}image:golang:latestname:go_buildpull:not_presentenvironment:cgo_enabled:&#34;0&#34;goos:linuxtemplates:-name:gosource:github.com/github/octocat/go/template.ymltype:github{ &#34;version&#34;: &#34;1&#34;, &#34;metadata&#34;: {}, &#34;worker&#34;: &#34;secrets&#34;: &#34;name&#34;: &#34;go_module&#34;, &#34;key&#34;: &#34;github/octocat/template_secret&#34;, &#34;engine&#34;: &#34;native&#34;, &#34;type&#34;: &#34;repo&#34;, &#34;origin&#34;: &#34;ruleset&#34;: &#34;if&#34;: &#34;unless&#34;: {} ], &#34;steps&#34;: }, &#34;commands&#34;: &#34;go vet ./... &amp;&amp; git diff --exit-code; code=$?; checkout -- .; (exit $code)&#34;, fmt $code)&#34; &#34;template&#34;: &#34;image&#34;: &#34;golang:latest&#34;, &#34;go_validate&#34;, &#34;pull&#34;: &#34;not_present&#34; test ./...&#34; &#34;go_test&#34;, build -a -ldflags &#39;-extldflags &#34;-static &#34;&#39; -o release/heyvela {$go_module}&#34; &#34;go_build&#34;, &#34;not_present&#34;, &#34;environment&#34;: &#34;cgo_enabled&#34;: &#34;0&#34;, &#34;goos&#34;: &#34;linux&#34; &#34;go-tag_validate&#34;, &#34;go-tag_test&#34;, &#34;go-tag_build&#34;, &#34;templates&#34;: &#34;go&#34;, &#34;source&#34;: &#34;github.com/github/octocat/go/template.yml&#34;, &#34;github&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/compiler/",
    "display": "Infrastructure/Server/Compiler",
    "title": "Compiler",
    "content": "the compiler component one of server components for vela. defines system vela uses transforming pipeline into an executable representation worker. "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/go/conditional/",
    "display": "Tutorials/Go/Conditional",
    "title": "Conditionals",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from template conditional: {{if pipeline}} t1 {{end}} value of pipeline empty, output generated; otherwise, executed. empty values are false, 0, any nil pointer interface value, array, slice, map, string length zero. dot unaffected. information if/else statements see conditional docs sample let&rsquo;s take look at using with variable template: metadata:template:true{{$br:=vela&#34;build_branch&#34;}}steps:-name:testcommands:-gotest./...image:{{.image}}{{.pull_policy}}ruleset:event:[push,pull_request]# branch equals master add step final pipeline{{if(eq$br&#34;master&#34;)}}-name:buildcommands:-gobuildimage:{{.image}}{{.pull_policy}}ruleset:event:[push,pull_request]{{end}} caller could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:-name:golangtemplate:name:samplevars:image:golang:latestpull_policy:&#34;pull: always&#34; which means compiled execution worker is: version:&#34;1&#34;steps:-name:sample_testcommands:-gotest./...image:golang:latestpull:alwaysruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildimage:golang:latestpull:alwaysruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/starlark/conditional/",
    "display": "Tutorials/Starlark/Conditional",
    "title": "Conditionals",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview from conditional expressions: &#34;yes&#34; if enabled else &#34;no&#34; for information on if/else statements see docs sample let&rsquo;s take look at using with variable template: def main(ctx): steps &#34;name&#34;: &#34;test&#34;, &#34;image&#34;: ctx[&#34;vars&#34;][&#34;image&#34;], &#34;commands&#34;: &#34;go test ./...&#34; ], &#34;pull&#34;: ctx[&#34;vars&#34;][&#34;pull_policy&#34;], &#34;ruleset&#34;: &#34;event&#34;: &#34;push&#34;, &#34;pull_request&#34; branch equals master add step the final pipeline ctx[&#34;vela&#34;][&#34;build&#34;][&#34;branch&#34;] == &#34;master&#34;: steps.append( &#34;build&#34;, build&#34; return &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: steps, caller of template could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.startype:githubformat:starlarksteps:-name:sampletemplate:name:golangvars:image:golang:latestpull_policy:&#34;always&#34; which means compiled execution worker is: version:&#34;1&#34;steps:-name:sample_testcommands:-gotest./...image:golang:latestpull:alwaysruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildimage:golang:latestpull:alwaysruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/database/",
    "display": "Infrastructure/Server/Database",
    "title": "Database",
    "content": "the database component one of server components for vela. defines system vela uses storing its data at rest. an organized collection information necessary platform to operate. configuration following options are used configure component: name environment description database.driver database_driver type client control operate database.config database_config full connection string database.connection.open database_connection_open total number open connections database.connection.idle database_connection_idle idle database.connection.life database_connection_life amount time reusable all available support vela_* prefixes variables. example: vela_database_driver drivers documentation sqlite3 sqlite storage https://www.sqlite.org postgres postgresql https://www.postgresql.org limitations these known archives by default, does not perform any archival data. currently, functionality considered out scope project should be responsibility admins installation. we recommend reviewing third party tools provided vendor achieve functionality. backups creation create your system. migration handle migrations. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/detach/",
    "display": "Pipeline/Steps/Detach",
    "title": "Detach",
    "content": "the detach component part of step for vela. declaration allows you to run container detached (headless) state. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang commands: go ./... build detach: true ./main -http=:8080 pipeline will execute first, then finally step. "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/docker/",
    "display": "Registry/Pipeline/Docker",
    "title": "Docker",
    "content": "description plugin enables you to build publish docker images vela pipeline. source code: https://github.com/go-vela/vela-docker registry: https://hub.docker.com/r/target/vela-docker usage note: users should refrain from using latest as the tag for image. it recommended use semantically versioned instead. samples of building publishing an image: steps:-name:publish_hello-worldimage:target/vela-docker:latestpull:alwaysparameters:registry:index.docker.iorepo:octocat/hello-worldtags:[latest]steps:-name:publish_hello-worldimage:target/vela-docker:latestpull:alwaysparameters:registry:index.docker.iotags:[index.docker.io/octocat/hello-world:latest] two above are functionally equivalent. sample image without publishing: steps: name: hello world target/vela-docker:latest pull: always parameters: dry_run: true index.docker.io repo: octocat/hello-world tags: with custom octocat/hello-world:1 index.docker.io/octocat/hello-world:foobar arguments: build_args: foo=bar caching: publish_hello-world cache_from: index.docker.io/octocat/hello-world daemon settings: daemon: registry_mirrors: mirror.index.docker.io secrets configuring sensitive information your pipeline plain text. internal can substitute these values at runtime: secrets: docker_username, docker_password username: octocat password: supersecretpassword example will add step environment variables: docker_username=&lt;value&gt; docker_password=&lt;value&gt; external accepts following files authentication: parameter volume configuration password /vela/parameters/docker/password, /vela/secrets/docker/password username /vela/parameters/docker/username, /vela/secrets/docker/username read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. by default kit on; be turned off setting docker_buildkit=0 key.key syntax signifies new yaml object within definition. used configure name required add_hosts host-to-ip mapping format (host:ip) false n/a parameter_add_hosts docker_add_hosts build_args pass build-time parameter_build_args docker_build_args cache_from consider cache sources parameter_cache_from docker_cache_from cgroup_parent parent cgroup container parameter_cgroup_parent docker_cgroup_parent compress enable compressing context gzip parameter_compress docker_compress and/or directory parameter_context docker_context cpu parameter, see settings below parameter_cpu docker_cpu parameter_daemon docker_daemon disable_content_trust skipping verification parameter_disable_content_trust docker_disable_content_trust dry_run parameter_dry_run docker_dry_run dockerfile parameter_file docker_file force_rm removing intermediate containers after successful parameter_force_rm docker_force_rm image_id_file write id parameter_image_id_file docker_image_id_file isolation technology parameter_isolation docker_isolation labels metadata parameter_labels docker_labels log_level log level info parameter_log_level docker_log_level memory limit parameter_memory docker_memory memory_swaps swap equal plus swap: &lsquo;-1&rsquo; unlimited parameter_memory_swaps docker_memory_swaps network networking mode run instructions during parameter_network docker_network no_cache disable caching when parameter_no_cache docker_no_cache output destination (type=local,dest=path) parameter_outputs docker_outputs communication registry parameter_password platform if server multi-platform capable parameter_platform docker_platform progress type options (auto|plain|tty) parameter_progress docker_progress pull attempting newer version parameter_pull docker_pull quiet suppressing print on success parameter_quiet docker_quiet address communicate parameter_registry docker_registry remove parameter_remove docker_remove repo repository parameter_repo docker_repo expose (only buildkit enabled) (id=mysecret,src=/local/secret) parameter_secrets docker_secrets security_opts security parameter_security_opts docker_security_opts shm_sizes size /dev/shm parameter_shm_sizes docker_shm_sizes squash squashing newly built layers into single layer parameter_squash docker_squash ssh_components ssh agent socket keys (default|[=|[,]]) parameter_ssh_components docker_ssh_components stream attaching negotiate parameter_stream docker_stream tags (name:tag) parameter_tags docker_tags target stage parameter_target docker_target ulimits parameter_ulimits docker_ulimits user parameter_username docker_username parameter: period cfs (completely fair scheduler) quota shares (relative weight) set_cpus cpus which allow execution (0-3, 0,1) set_mems mems bip bridge ip dns settings, experimental features insecure_registries insecure registries ipv6 mtu contain registry_mirrors mirrors storage setting: servers nameservers searches search domains driver opts template coming soon! troubleshooting start tuning logs being displayed: log_level: trace list common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/downstream/",
    "display": "Registry/Pipeline/Downstream",
    "title": "Downstream",
    "content": "description plugin enables you to trigger builds for other repos vela pipeline. source code: https://github.com/go-vela/vela-downstream registry: https://hub.docker.com/r/target/vela-downstream usage note: users should refrain from using latest as the tag docker image. it recommended use semantically versioned instead. sample of triggering downstream build: steps:-name:trigger_hello-worldimage:target/vela-downstream:latestpull:alwaysparameters:branch:masterrepos:-octocat/hello-worldserver:https://vela-server.localhost build multiple repos: steps: name: trigger_multiple image: target/vela-downstream:latest pull: always parameters: branch: master octocat/hello-world go-vela/hello-world server: https://vela-server.localhost with different branches: symbol at end org/repo provide unique branch per repo. octocat/hello-world@test go-vela/hello-world@stage secrets configuring sensitive information your pipeline plain text. internal can substitute these values runtime: trigger_hello-world secrets: downstream_token token: supersecretvelatoken example will add secret step environment variables: downstream_token=&lt;value&gt; external accepts following files authentication: parameter volume configuration token /vela/parameters/downstream/token, /vela/secrets/downstream/token read value stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. are used configure name required default on true parameter_branch downstream_branch log_level log level info parameter_log_level downstream_log_level list names n/a parameter_repos downstream_repos server communicate parameter_server downstream_server communication parameter_token template coming soon! troubleshooting start by tuning logs being displayed: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/enable_repo/",
    "display": "Docs/Usage/Enable repo",
    "title": "Enable a Repo",
    "content": "note: you will need admin access to the repo be able activate it vela. because add webhooks repo. via ui for example, we&rsquo;ll go over using can always head cli docs on how cli. log into your vela instance. click repositories. select org from available list. next would like add. alternatively all repos an org. if doesn&rsquo;t exist, try clicking refresh list top right. now has necessary web hook "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/secrets/engine/",
    "display": "Pipeline/Secrets/Engine",
    "title": "Engine",
    "content": "the engine component part of secret for vela. declaration allows you to provide name storage backend fetch from. has default value native. options following are available configure component: description native uses vela database vault hashicorp instance designed store secrets database. instance. information refer vault&rsquo;s documentation. currently not supported. using coming soon! syntax an example valid version: &#34;1&#34; metadata: template: false secrets: name: username engine: key: github/octocat/username type: repo password github/octocat/password steps: test image: golang username, commands: echo &#34;machine github.com&#34; &gt; .netrc &#34;login ${username}&#34; &#34;password ${password}&#34; go ./... pipeline will allow be referenced: also add environment variables step: username=&lt;value&gt; password=&lt;value&gt; "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/entrypoint/",
    "display": "Pipeline/Services/Entrypoint",
    "title": "Entrypoint",
    "content": "the entrypoint component part of service for vela. declaration allows you to provide command execute inside container. syntax following an example valid component: version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 entrypoint: &#34;/docker-entrypoint.sh&#34; steps: test golang environment: database_driver: database_config: &#39;postgres://postgres@postgres:5432/postgres?sslmode=disable&#39; commands: go ./... pipeline will start first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/entrypoint/",
    "display": "Pipeline/Steps/Entrypoint",
    "title": "Entrypoint",
    "content": "the entrypoint component part of step for vela. declaration allows you to provide command execute inside container. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang entrypoint: /usr/local/go/bin/go commands: go ./... build pipeline will first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/environment/",
    "display": "Pipeline/Services/Environment",
    "title": "Environment",
    "content": "the environment component part of service for vela. declaration allows you to provide variables injected into container environment. syntax following an example valid component: version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 environment: postgres_db: postgres_user: steps: test golang database_driver: database_config: &#39;postgres://example@postgres:5432/example?sslmode=disable&#39; commands: go ./... pipeline will start first, then run step. defaults tip: full list available reference "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/environment/",
    "display": "Pipeline/Steps/Environment",
    "title": "Environment",
    "content": "the environment component part of step for vela. declaration allows you to provide variables injected into container environment. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang environment: cgo_enabled: &#39;0&#39; goos: linux goarch: amd64 commands: go ./... build pipeline will execute first, then run step. defaults tip: full list available reference "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/worker/executor/",
    "display": "Infrastructure/Worker/Executor",
    "title": "Executor",
    "content": "the executor component one of worker components for vela. coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/pipeline/expand/",
    "display": "Api/Pipeline/Expand",
    "title": "Expand",
    "content": "endpoint post /api/v1/pipelines/:org/:repo/expand parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider output format expanded pipeline configuration permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve expand templates 401 user does not have proper 404 500 system error while retrieving expanding sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x get -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat/expand&#34; response notice, when step fields such as image commands will be arranged alphabetical order. version:&#34;1&#34;secrets:-name:go_modulekey:github/octocat/template_secretengine:nativetype:reposteps:-commands:-govet./...&amp;&amp;gitdiff--exit-code;code=$?;gitcheckout--.;(exit$code)-gofmt./...&amp;&amp;gitdiff--exit-code;code=$?;gitcheckout--.;(exit$code)image:golang:latestname:go_validatepull:not_present-commands:-gotest./...image:golang:latestname:go_testpull:not_present-commands:-gobuild-a-ldflags&#39;-extldflags &#34;-static&#34;&#39;-orelease/heyvela{$go_module}image:golang:latestname:go_buildpull:not_presentenvironment:cgo_enabled:&#34;0&#34;goos:linuxtemplates:-name:gosource:github.com/github/octocat/go/template.ymltype:github{ &#34;version&#34;: &#34;1&#34;, &#34;metadata&#34;: {}, &#34;worker&#34;: &#34;secrets&#34;: &#34;name&#34;: &#34;go_module&#34;, &#34;key&#34;: &#34;github/octocat/template_secret&#34;, &#34;engine&#34;: &#34;native&#34;, &#34;type&#34;: &#34;repo&#34;, &#34;origin&#34;: &#34;ruleset&#34;: &#34;if&#34;: &#34;unless&#34;: {} ], &#34;steps&#34;: }, &#34;commands&#34;: &#34;go vet ./... &amp;&amp; git diff --exit-code; code=$?; checkout -- .; (exit $code)&#34;, fmt $code)&#34; &#34;template&#34;: &#34;image&#34;: &#34;golang:latest&#34;, &#34;go_validate&#34;, &#34;pull&#34;: &#34;not_present&#34; test ./...&#34; &#34;go_test&#34;, build -a -ldflags &#39;-extldflags &#34;-static &#34;&#39; -o release/heyvela {$go_module}&#34; &#34;go_build&#34;, &#34;not_present&#34;, &#34;environment&#34;: &#34;cgo_enabled&#34;: &#34;0&#34;, &#34;goos&#34;: &#34;linux&#34; &#34;templates&#34;: &#34;go&#34;, &#34;source&#34;: &#34;github.com/github/octocat/go/template.yml&#34;, &#34;github&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/worker/flavor/",
    "display": "Pipeline/Worker/Flavor",
    "title": "Flavor",
    "content": "the flavor component part of template for vela. declaration allows you to route your build single flavors within vela cluster. syntax following an example valid component: version: &#34;1&#34; metadata: template: false worker: flavor: large steps: name: test image: golang commands: go ./... pipeline will start run on worker with available "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/starlark/functions/",
    "display": "Tutorials/Starlark/Functions",
    "title": "Functions",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview from functions: def twice(x): return str(twice) &#34;&lt;function f&gt;&#34; twice(2) twice(&#34;two&#34;) &#34;twotwo&#34; the function&rsquo;s name preceded by keyword followed parameter list (which enclosed parentheses), colon, then an indented block of statements which form body function. comma-separated whose elements are four kinds. first come zero more required parameters, simple identifiers; all calls must provide argument value for these parameters. parameters optional name=expression. expression specifies default use that do not it. optionally single *. called varargs parameter, it accumulates surplus positional arguments specified call. finally, there may be **. dictionary any name=value match prior parameter. sample let&rsquo;s take look at using function within template: main(ctx): &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: step(&#39;foo&#39;), step(&#39;bar&#39;) ], step(word): &#34;name&#34;: &#34;build_%s&#34; word, &#34;image&#34;: &#34;alpine:latest&#34;, &#39;commands&#39;: &#34;echo %s&#34; word caller template could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.starformat:starlarktype:githubsteps:-name:echotemplate:name:sample means compiled pipeline execution on worker is: version:1steps:-name:sample_build_fooimage:alpine:latestcommands:-echofoo-name:sample_build_barimage:alpine:latestcommands:-echobar "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/completion/generate/",
    "display": "Cli/Completion/Generate",
    "title": "Generate",
    "content": "command vela generate completion &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables bash auto-completion script vela_bash, completion_bash zsh vela_zsh, completion_zsh permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request --bash response #! /bin/bash _cli_bash_autocomplete() if [[ &#34;${comp_words[0]}&#34; != &#34;source&#34; ]]; then local cur opts base compreply=() cur=&#34;${comp_words[comp_cword]}&#34; &#34;$cur&#34; == &#34;-&#34;* opts=$( ${comp_words[@]:0:$comp_cword} ${cur} --generate-bash-completion else fi compreply=( $(compgen -w &#34;${opts}&#34; -- ${cur}) return complete -o bashdefault default nospace -f _cli_bash_autocomplete permanent automatic covers how enable your terminal permanently. version of greater than 4. check with: &ndash;version older 4, use brew newer version. v2 bash-completion@2 copy &gt;&gt; /usr/local/etc/bash_completion.d/vela.sh update profile with export bash_completion_compat_dir=&#34;/usr/local/etc/bash_completion.d&#34; $home/.bash_profile -r &#34;/usr/local/etc/profile.d/bash_completion.sh&#34; ]] &amp;&amp; source current &lt;(vela --zsh) $home/.zshrc you&rsquo;re met an error like: complete:13: not found: compdef need add top $home/.zshrc: autoload -uz compinit "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/config/generate/",
    "display": "Cli/Config/Generate",
    "title": "Generate",
    "content": "command vela generate config &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables api.addr full url api server vela_addr, config_addr api.token.access access token vela_access_token, config_access_token api.token.refresh refresh vela_refresh_token, config_refresh_token api.token pat vela_token, config_token api.version version of vela_api_version, config_api_version log.level set level logging vela_log_level, config_log_level output format results vela_output, config_output org organization calls vela_org, config_org repo repository vela_repo, config_repo secret.engine secret engine vela_engine, config_engine secret.type type vela_type, config_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request --api.addr https://vela-server.localhost --log.level info response api: addr: log: level: secret: {} "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/pipeline/generate/",
    "display": "Cli/Pipeline/Generate",
    "title": "Generate",
    "content": "command vela generate pipeline &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables file of vela_file, pipeline_file path vela_path, pipeline_path stages generates with vela_stages, pipeline_stages type being generated vela_type, pipeline_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request response &#34;.vela.yml&#34; go "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/build/get/",
    "display": "Api/Build/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;running&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474204, &#34;created&#34;: &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;second commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;ed95dcc0687c&#34;, &#34;runtime&#34;: &#34;distribution&#34;: &#34;&#34; }, 1563474077, 1563474076, &#34;first &#34;82823eb770b0&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/deployment/get/",
    "display": "Api/Deployment/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/deployments/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/deployments/github/octocat&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;url&#34;: &#34;https://api.github.com/repos/github/octocat/deployments/2&#34;, &#34;user&#34;: &#34;octocat&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;ref&#34;: &#34;master&#34;, &#34;task&#34;: &#34;deploy:vela&#34;, &#34;target&#34;: &#34;production&#34;, &#34;description&#34;: &#34;deployment from vela&#34; }, &#34;https://api.github.com/repos/github/octocat/deployments/1&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/hook/get/",
    "display": "Api/Hook/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/hooks/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;build_id&#34;: &#34;number&#34;: &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;status&#34;: &#34;success&#34;, &#34;link&#34;: &#34;&#34; }, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/pipeline/get/",
    "display": "Api/Pipeline/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/pipelines/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider output format pipeline configuration permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve 401 user does not have proper 404 500 system error while retrieving sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat&#34; response version:&#34;1&#34;steps:-name:helloimage:golangruleset:event:pushcommands:-echo&#34;hello&#34;{ &#34;version&#34;: &#34;1&#34;, &#34;metadata&#34;: {}, &#34;worker&#34;: &#34;steps&#34;: &#34;ruleset&#34;: &#34;if&#34;: &#34;event&#34;: &#34;push&#34; }, &#34;unless&#34;: &#34;matcher&#34;: &#34;filepath&#34;, &#34;operator&#34;: &#34;and&#34; &#34;commands&#34;: &#34;echo &#34;hello &#34;&#34; ], &#34;template&#34;: &#34;image&#34;: &#34;golang&#34;, &#34;name&#34;: &#34;hello&#34;, &#34;pull&#34;: &#34;not_present&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/repo/get/",
    "display": "Api/Repo/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false }, 2, &#34;octokitty&#34;, &#34;github/octokitty&#34;, &#34;https://github.com/github/octokitty&#34;, &#34;https://github.com/github/octokitty.git&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/secret/get/",
    "display": "Api/Secret/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/secrets/:engine/:type/:org/:name parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: null, &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] }, 2, &#34;bar&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/service/get/",
    "display": "Api/Service/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/services parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 }, &#34;clone&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/step/get/",
    "display": "Api/Step/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/steps parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; }, &#34;clone&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/user/get/",
    "display": "Api/User/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/users permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users&#34; response &#34;id&#34;: 2, &#34;name&#34;: &#34;octocat&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false }, 1, &#34;octokitty&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/build/get/",
    "display": "Cli/Build/Get",
    "title": "Get",
    "content": "command vela get build &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization builds vela_org, build_org repo repository vela_repo, build_repo output format vela_output, build_output page prints specific vela_page, build_page per.page number print per vela_per_page, build_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response status event branch duration failure push master 45s 50s success 54s 55s pending ... "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/deployment/get/",
    "display": "Cli/Deployment/Get",
    "title": "Get",
    "content": "command vela get deployment &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization deployments vela_org, deployment_org repo repository vela_repo, deployment_repo output format vela_output, deployment_output page prints specific vela_page, deployment_page per.page number print per vela_per_page, deployment_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response id task user ref target deploy:vela master production "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/hook/get/",
    "display": "Cli/Hook/Get",
    "title": "Get",
    "content": "command vela get hook &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization hooks vela_org, hook_org repo repository vela_repo, hook_repo output format vela_output, hook_output page prints specific vela_page, hook_page per.page number print per vela_per_page, hook_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response status event branch failure push master success "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/log/get/",
    "display": "Cli/Log/Get",
    "title": "Get",
    "content": "command vela get log &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, log_org repo repository vela_repo, log_repo build number vela_build, log_build output format logs vela_output, log_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response git init initialized empty /vela/src/github.com/github/octocat/.git/ remote add origin https://github.com/github/octocat.git --verbose (fetch) (push) fetch --no-tags refs/heads/master from https://github.com/github/octocat branch master -&gt; fetch_head [new branch] origin/master reset --hard afafce5e33a8efd4340613b31a953107d6dec3a3 head now at afafce5 dummy commit echo &#34;hello world!&#34; hello world! "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/repo/get/",
    "display": "Cli/Repo/Get",
    "title": "Get",
    "content": "command vela get repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output page prints specific repositories vela_page, repo_page per.page number print per vela_per_page, repo_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request response org/repo status events visibility branch github/octocat true push,pull_request public master "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/secret/get/",
    "display": "Cli/Secret/Get",
    "title": "Get",
    "content": "command vela get secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization secrets vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat response events foo github/octocat push,pull_request "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/service/get/",
    "display": "Cli/Service/Get",
    "title": "Get",
    "content": "command vela get service &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization services vela_org, service_org repo repository vela_repo, service_repo build number vela_build, service_build output format vela_output, service_output page prints specific vela_page, service_page per.page print per vela_per_page, service_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response status runtime duration publish failure 1s success 17s test 10s clone 2s "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/step/get/",
    "display": "Cli/Step/Get",
    "title": "Get",
    "content": "command vela get step &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization steps vela_org, step_org repo repository vela_repo, step_repo build number vela_build, step_build output format vela_output, step_output page prints specific vela_page, step_page per.page print per vela_per_page, step_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response status runtime duration publish failure 1s success 17s test 10s clone 2s "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/git/",
    "display": "Registry/Pipeline/Git",
    "title": "Git",
    "content": "description note: plugin automatically injected into your pipeline for the source repository. enables you to clone repositories vela build workspace. code: https://github.com/go-vela/vela-git registry: https://hub.docker.com/r/target/vela-git usage users should refrain from using latest as tag docker image. it recommended use semantically versioned instead. sample of cloning repository: steps:-name:clone_hello-worldimage:target/vela-git:latestpull:alwaysparameters:path:hello-worldref:refs/heads/masterremote:https://github.com/octocat/hello-world.gitsha:7fd1a60b01f91b314f59955a4e4d4e80d8edf11d repository with submodules: steps: name: clone_hello-world image: target/vela-git:latest pull: always parameters: path: hello-world ref: refs/heads/master remote: https://github.com/octocat/hello-world.git sha: 7fd1a60b01f91b314f59955a4e4d4e80d8edf11d true tags: secrets configuring sensitive information plain text. internal can substitute these values at runtime: secrets: git_username, git_password username: octocat password: supersecretpassword /home/octocat_hello-world_1 example will add step environment variables: git_username=&lt;value&gt; git_password=&lt;value&gt; external accepts following files authentication: parameter volume configuration password /vela/parameters/git/password, /vela/secrets/git/password username /vela/parameters/git/username, /vela/secrets/git/username read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. are used configure name required default log_level log level info parameter_log_level git_log_level machine communicate github.com parameter_machine git_machine vela_netrc_machine authentication by parameter_password vela_netrc_password user parameter_username git_username vela_netrc_username path local parameter_path git_path vela_build_workspace ref reference generated commit parameter_ref git_ref vela_build_ref remote full url parameter_remote git_remote vela_repo_clone sha sha-1 hash parameter_sha git_sha vela_build_commit submodules fetching false parameter_submodules git_submodules tags parameter_tags git_tags depth specific not parameter_depth git_depth template coming soon! troubleshooting start tuning logs being displayed: log_level: trace below list common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/tutorials/go/",
    "display": "Plugins/Tutorials/Go",
    "title": "Go",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from go documentation: an open source programming language makes it easy build simple, reliable, efficient software. code plugin using go, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program http request the provided input: package main import &#34;fmt&#34; &#34;net/http&#34; &#34;os&#34; &#34;strings&#34; func main() // method parameter environment := os.getenv(&#34;parameter_method&#34;) body os.getenv(&#34;parameter_body&#34;) url os.getenv(&#34;parameter_url&#34;) payload strings.newreader(body) new input request, err http.newrequest(method, url, payload) if != nil fmt.println(err) os.exit(1) send capture response response, http.defaultclient.do(request) output fmt.println(response) example of section go-vela/vela-tutorials repository. executable now have accomplish our plugin&rsquo;s task, compile produce binary target platform: goos=linux goarch=amd64 cgo_enabled=0 -o vela-sample please ensure compiled right platform. it&rsquo;s not, may fail properly run unclear error messages. image once needed dockerfile should contain setup when executed: fromgolang:alpinerun apk add --update --no-cache ca-certificatescopy /bin/vela-sampleentrypoint [&#34;/bin/vela-sample&#34;] target/vela-sample docker publishing order pipeline, make sure publish registry: -t target/vela-sample:go push has added benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written with go&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplegopluginimage:target/vela-sample:gopull:alwaysparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/sdk/go/",
    "display": "Reference/Sdk/Go",
    "title": "Go",
    "content": "overview vela go sdk client to perform operations on objects view content new way integrate into applications. for complete list of apis examples, please take look at the godoc reference documentation. minimum requirements 1.13 above get build info example below sample program demonstrating how authenticate with sdk: package main import &#34;fmt&#34; &#34;github.com/go-vela/sdk-go/vela&#34; func main() // full uri server url := &#34;https://your-vela-server.example.com&#34; token &#34;sometoken&#34; accesstoken &#34;someaccesstoken&#34; refreshtoken &#34;somerefreshtoken&#34; instantiate client, err vela.newclient(url, nil) if != nil fmt.println(err) set authentication mechanisms client.authentication.settokenauth(token) client.authentication.setaccessandrefreshauth(accesstoken, refreshtoken) from build, resp, c.build.get(&#34;go-vela&#34;, &#34;sdk-go&#34;, 1) fmt.printf(&#34;received response code %d, %+v&#34;, resp.statuscode, build) "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/hook/",
    "display": "Concepts/System/Hook",
    "title": "Hook",
    "content": "the hook component part of core system components for vela. defined as single, webhook object received from repo source control provider prompting vela to perform an action. most cases, processing involves fetching pipeline triggering build. github&rsquo;s documentation: webhooks provide way notifications be delivered external web server whenever certain actions occur on repository organization. fields following make up component: name type description branch string commit that triggered build_id int64 unique identifier build created unix timestamp when was error message during event host hostname id link full navigatable url number int repo_id status signifies end condition source_id stored configured backend hooks table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/admin/hook/",
    "display": "Api/Admin/Hook",
    "title": "Hook",
    "content": "endpoint get /api/v1/admin/hooks permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/hooks&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: &#34;build_id&#34;: &#34;number&#34;: 1, &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;status&#34;: &#34;success&#34;, &#34;link&#34;: &#34;&#34; }, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/image/",
    "display": "Pipeline/Services/Image",
    "title": "Image",
    "content": "the image component part of service for vela. declaration allows you to provide docker used create ephemeral container. all vela services will require an be provided. examples any valid publicly accessible registry can image:golangimage:golang:latestimage:golang:1.12image:library/golang:1.12image:index.docker.io/library/golangimage:index.docker.io/library/golang:1.12 above images would pull from golang repository. syntax following example component: version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 pull: always steps: test environment: database_driver: database_config: &#39;postgres://postgres@postgres:5432/postgres?sslmode=disable&#39; commands: go ./... pipeline start first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/image/",
    "display": "Pipeline/Steps/Image",
    "title": "Image",
    "content": "the image component part of step for vela. declaration allows you to provide docker used create ephemeral container. all vela steps will require an be provided. options any valid publicly accessible registry can image:golangimage:golang:latestimage:golang:1.12image:library/golang:1.12image:index.docker.io/library/golangimage:index.docker.io/library/golang:1.12 above images would pull from golang repository. syntax following example component: version: &#34;1&#34; metadata: template: false steps: name: test image: commands: go ./... build pipeline execute first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/schema/",
    "display": "Docs/Usage/Schema",
    "title": "JSON Schema support",
    "content": "the schema gets published updated via https://github.com/go-vela/types where it ends up as release artifact. latest available for download from https://github.com/go-vela/types/releases/latest/download/schema.json. addition, has been added to json store project at https://www.schemastore.org/ which provides direct support various editors (see supporting section https://www.schemastore.org/json/). "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/kaniko/",
    "display": "Registry/Pipeline/Kaniko",
    "title": "Kaniko",
    "content": "description plugin enables you to build publish docker images vela pipeline. source code: https://github.com/go-vela/vela-kaniko registry: https://hub.docker.com/r/target/vela-kaniko usage note: users should refrain from using latest as the tag for image. it recommended use semantically versioned instead. sample of building publishing an image: steps:-name:publish_hello-worldimage:target/vela-kaniko:latestpull:alwaysparameters:registry:index.docker.iorepo:index.docker.io/octocat/hello-world image without publishing: steps: name: publish_hello-world target/vela-kaniko:latest pull: always parameters: dry_run: true index.docker.io repo: index.docker.io/octocat/hello-world with custom tags: foobar automatic auto_tag: depending on type event, will be tagged follows: event (using v1.0.0 example): index.docker.io/octocat/hello-world:latest index.docker.io/octocat/hello-world:v1.0.0 all other events: index.docker.io/octocat/hello-world:eeea105fed7fc11bda4b43a00edfc49a5c982968 arguments: build_args: foo=bar caching: cache: cache_repo: snapshot mode snapshot_mode: redo secrets configuring sensitive information your pipeline plain text. internal can substitute these values at runtime: secrets: kaniko_username, kaniko_password username: octocat password: supersecretpassword example add step environment variables: kaniko_username=&lt;value&gt; kaniko_password=&lt;value&gt; external accepts following files authentication: parameter volume configuration password /vela/parameters/kaniko/password, /vela/secrets/kaniko/password username /vela/parameters/kaniko/username, /vela/secrets/kaniko/username read secret stored /vela/secrets/ parameters supports reading via variables files. any set file take precedence over environment. help improve performance but recommend follow kaniko&rsquo;s guidelines picking mode. are used configure name required default auto_tag tagging (tag sha, latest) false parameter_auto_tag kaniko_auto_tag build_args passed build-time n/a parameter_build_args kaniko_build_args cache enable caching layers parameter_cache kaniko_cache cache_repo specific repo parameter_cache_repo kaniko_cache_repo context path parameter_context kaniko_context dockerfile parameter_dockerfile kaniko_dockerfile dry_run parameter_dry_run kaniko_dry_run generated by parameter_event kaniko_event vela_build_event labels unique parameter_labels kaniko_labels log_level log level info parameter_log_level kaniko_log_level mirror registry parameter_mirror kaniko_mirror communication parameter_password docker_password repository parameter_registry kaniko_registry parameter_repo kaniko_repo sha sha-1 hash commit parameter_sha kaniko_sha vela_build_commit snapshot_mode control how filesystem. options (full time) parameter_tag kaniko_tag vela_build_tag tags parameter_tags kaniko_tags target stage parameter_target kaniko_target user parameter_username kaniko_username docker_username template coming soon! troubleshooting start tuning logs being displayed: log_level: trace below list common problems solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/secrets/key/",
    "display": "Pipeline/Secrets/Key",
    "title": "Key",
    "content": "the key component part of secret for vela. declaration allows you to provide path fetch from storage backend. inherits default value name. syntax following an example valid component: version: &#34;1&#34; metadata: template: false secrets: name: username engine: native key: github/octocat/username type: repo password github/octocat/password steps: test image: golang username, commands: echo &#34;machine github.com&#34; &gt; .netrc &#34;login ${username}&#34; &#34;password ${password}&#34; go ./... pipeline will allow secrets be referenced: also add environment variables step: username=&lt;value&gt; password=&lt;value&gt; "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/kubernetes/",
    "display": "Registry/Pipeline/Kubernetes",
    "title": "Kubernetes",
    "content": "description plugin enables the ability to manage resources kubernetes vela pipeline. source code: https://github.com/go-vela/vela-kubernetes registry: https://hub.docker.com/r/target/vela-kubernetes usage note: users should refrain from using latest as tag for docker image. it recommended use semantically versioned instead. sample of applying files: steps:-name:kubernetesimage:target/vela-kubernetes:latestpull:alwaysparameters:action:applyfiles:[kubernetes/common,kubernetes/dev/deploy.yml] pretending apply steps: name: image: target/vela-kubernetes:latest pull: always parameters: action: dry_run: true kubernetes/common, kubernetes/dev/deploy.yml patching containers steps:-name:kubernetesimage:target/vela-kubernetes:latestpull:alwaysparameters:action:patchfiles:[kubernetes/common,kubernetes/dev/deploy.yml]containers:-name:sampleimage:alpine:latest patch containers: alpine:latest watching status resources: steps:-name:kubernetesimage:target/vela-kubernetes:latestpull:alwaysparameters:action:statusstatuses:[sample] secrets configuring sensitive information your pipeline plain text. internal can substitute these values at runtime: secrets: kube_config config: --- apiversion: v1 kind: config example will add step environment variables: kube_config=&lt;value&gt; external accepts following files authentication: parameter volume configuration /vela/parameters/kubernetes/config, /vela/secrets/kubernetes/config read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. are used configure name required default action perform against n/a parameter_action kubernetes_action cluster false parameter_cluster kubernetes_cluster context parameter_context kubernetes_context content communication with parameter_config kubernetes_config log_level log level info parameter_log_level kubernetes_log_level namespace parameter_namespace kubernetes_namespace path parameter_path kubernetes_path version kubectl cli install v1.17.0 parameter_version kubernetes_version dry_run parameter_dry_run kubernetes_dry_run list directories parameter_files kubernetes_files output parameter_output kubernetes_output parameter_containers kubernetes_containers statuses watch on parameter_statuses kubernetes_statuses timeout total time allowed 5m parameter_timeout kubernetes_timeout until resource completes parameter_watch kubernetes_watch template coming soon! troubleshooting you start by tuning logs being displayed: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/log/",
    "display": "Concepts/System/Log",
    "title": "Log",
    "content": "the log component part of core system components for vela. defined as sequence records about actions performed by worker build. fields following make up component: name type description build_id int64 unique identifier build entry data []byte raw from id repo_id repo that triggered service_id service step_id step stored configured vela backend logs table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/build/logs/",
    "display": "Api/Build/Logs",
    "title": "Logs",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/logs parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/logs&#34; response &#34;id&#34;: 1, &#34;step_id&#34;: &#34;build_id&#34;: &#34;repo_id&#34;: &#34;data&#34;: &#34;sgvsbg8sifdvcmxkiq==&#34; }, 2, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/service/logs/",
    "display": "Api/Service/Logs",
    "title": "Logs",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/services/:service/logs parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1/logs&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;service_id&#34;: &#34;data&#34;: &#34;sgvsbg8sifdvcmxkiq==&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/step/logs/",
    "display": "Api/Step/Logs",
    "title": "Logs",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/steps/:step/logs parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1/logs&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;step_id&#34;: &#34;data&#34;: &#34;sgvsbg8sifdvcmxkiq==&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/go/loops_maps/",
    "display": "Tutorials/Go/Loops maps",
    "title": "Loops with Maps",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from template range: {{range pipeline}} t1 {{end}} value of pipeline must be an array, slice, map, channel. has length zero, nothing output; otherwise, dot set successive elements map executed. keys are basic type with defined order, will visited sorted key order. information range/else statements see conditional docs sample let&rsquo;s take look at ranging over template: metadata:template:truesteps:{{range$key,$value:=.images}}-name:test{{$key}}commands:-gotest./...image:{{$value}}{{.pull_policy}}ruleset:event:[push,pull_request]{{end}}-name:buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latest{{.pull_policy}}ruleset:event:[push,pull_request] caller could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:-name:golangtemplate:name:samplevars:pull_policy:&#34;pull: always&#34;images:_latest:golang:latest_1.13:golang:1.13_1.12:golang:1.13 which means compiled execution worker is: does not guarantee order maps. you need steps always outputted same use loops slice implementation. version:&#34;1&#34;steps:-name:sample_test_latestcommands:-gotest./...image:golang:latestpull:alwaysruleset:event:[push,pull_request]-name:sample_test_1.13commands:-gotest./...image:golang:1.13pull:alwaysruleset:event:[push,pull_request]-name:sample_test_1.12commands:-gotest./...image:golang:1.12pull:alwaysruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/starlark/loops_map/",
    "display": "Tutorials/Starlark/Loops map",
    "title": "Loops with Maps",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview from for loops: [[&#34;a&#34;, 1], [&#34;b&#34;, 2], [&#34;c&#34;, 3]]: print(a, i) prints &#34;a 1&#34;, &#34;b 2&#34;, &#34;c 3&#34; sample let&rsquo;s take look at looping over map template: def main(ctx): ruleset &#34;event&#34;: &#34;push&#34;, &#34;pull_request&#34; steps &#34;name&#34;: &#34;install&#34;, &#34;image&#34;: &#34;golang:latest&#34;, &#34;commands&#34;: &#34;go get ./...&#34; ], &#34;pull&#34;: ctx[&#34;vars&#34;][&#34;pull_policy&#34;], &#34;ruleset&#34;: ruleset, name, image ctx[&#34;vars&#34;][&#34;images&#34;].items(): steps.append( &#34;test_%s&#34; image, test &#34;build&#34;, build&#34; &#34;environment&#34;: &#34;cgo_enabled&#34;: &#34;0&#34;, &#34;goos&#34;: &#34;linux&#34;, }, pipeline &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: steps, return the caller of template could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.startype:githubsteps:-name:sampletemplate:name:golangvars:pull_policy:&#34;always&#34;images:_latest:golang:latest_1.13:golang:1.13_1.12:golang:1.12 which means compiled execution on worker is: vela does not guarantee order with maps. if you need always be outputted same use loops slice implementation. version:&#34;1&#34;steps:-name:sample_test_latestcommands:-gotest./...image:golang:latestpull:alwaysruleset:event:[push,pull_request]-name:sample_test_1.13commands:-gotest./...image:golang:1.13pull:alwaysruleset:event:[push,pull_request]-name:sample_test_1.12commands:-gotest./...image:golang:1.12pull:alwaysruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/go/loops_slice/",
    "display": "Tutorials/Go/Loops slice",
    "title": "Loops with Slices",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from template range: {{range pipeline}} t1 {{end}} value of pipeline must be an array, slice, map, channel. has length zero, nothing output; otherwise, dot set successive elements map executed. keys are basic type with defined order, will visited sorted key order. information range/else statements see conditional docs sample let&rsquo;s take look at ranging over slice template: metadata:template:truesteps:{{range$value:=.images}}-name:test_{{$value}}commands:-gotest./...image:{{$value}}{{.pull_policy}}ruleset:event:[push,pull_request]{{end}}-name:buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latest{{.pull_policy}}ruleset:event:[push,pull_request] caller could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:-name:golangtemplate:name:samplevars:pull_policy:&#34;pull: always&#34;images:[golang:latest,golang:1.13,golang:1.12] which means compiled execution worker is: version:&#34;1&#34;steps:-name:sample_test_latestcommands:-gotest./...image:golang:latestpull:alwaysruleset:event:[push,pull_request]-name:sample_test_golang:1.13commands:-gotest./...image:golang:1.13pull:alwaysruleset:event:[push,pull_request]-name:sample_test_golang:1.12commands:-gotest./...image:golang:1.12pull:alwaysruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/starlark/loops_slice/",
    "display": "Tutorials/Starlark/Loops slice",
    "title": "Loops with Slices",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview from for loops: [1, 2, 3]: print(i) prints &#34;1&#34;, &#34;2&#34;, &#34;3&#34; sample let&rsquo;s take look at ranging over slice template: def main(ctx): ruleset &#34;event&#34;: &#34;push&#34;, &#34;pull_request&#34; steps &#34;name&#34;: &#34;install&#34;, &#34;image&#34;: &#34;golang:latest&#34;, &#34;commands&#34;: &#34;go get ./...&#34; ], &#34;pull&#34;: ctx[&#34;vars&#34;][&#34;pull_policy&#34;], &#34;ruleset&#34;: ruleset, image ctx[&#34;vars&#34;][&#34;images&#34;]: steps.append( &#34;test_%s&#34; image, test &#34;build&#34;, build&#34; &#34;environment&#34;: &#34;cgo_enabled&#34;: &#34;0&#34;, &#34;goos&#34;: &#34;linux&#34;, }, pipeline &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: steps, return the caller of template could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.starformat:starlarktype:githubsteps:-name:sampletemplate:name:golangvars:pull_policy:&#34;always&#34;images:[golang:latest,golang:1.13,golang:1.12] which means compiled execution on worker is: version:&#34;1&#34;steps:-name:sample_test_latestcommands:-gotest./...image:golang:latestpull:alwaysruleset:event:[push,pull_request]-name:sample_test_golang:1.13commands:-gotest./...image:golang:1.13pull:alwaysruleset:event:[push,pull_request]-name:sample_test_golang:1.12commands:-gotest./...image:golang:1.12pull:alwaysruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/makisu/",
    "display": "Registry/Pipeline/Makisu",
    "title": "Makisu",
    "content": "description plugin enables you to build publish docker images vela pipeline. source code: https://github.com/go-vela/vela-makisu registry: https://hub.docker.com/r/target/vela-makisu usage note: it not recommended use latest as the tag for image. users should semantically versioned instead. sample of building publishing an image: steps:-name:publish_hello-worldimage:target/vela-makisu:latestpull:alwaysparameters:registry:index.docker.iotag:index.docker.io/octocat/hello-worldpushes:[index.docker.io] image without publishing: steps: name: hello world target/vela-makisu:latest pull: always parameters: pushes: index.docker.io tag: index.docker.io/octocat/hello-world:latest with custom tags: replicas: index.docker.io/octocat/hello-world:1 index.docker.io/octocat/hello-world:foobar arguments: build_args: foo=bar index.docker.io/octocat/hello-world redis caching: publish_hello-world redis_cache_options: addr: redis.company.com password: supersecretpassword ttl: 7d repo: secrets refrain from configuring sensitive information your pipeline plain text. can substitute values at runtime: secrets: docker_username, docker_password, redis_cache redis_cache: username: octocat parameters supports reading all via environment variables files set file take precedence over following are used configure push process: name required default build_args time arguments dockerfile false n/a commit info #!commit annotations compression on tar built options: (no speed size context be deny_list list locations ignored within configuration daemon destination output absolute path http_cache http options caching load loading into post local_cache_ttl live local cache (default 168h0m0s) modify_fs makisu modify outside its internal storage directories preserve_root copying root during after pushes registries server replicas pushing alternative targets i.e. &lt;registry&gt;/&lt;repo&gt;:&lt;tag&gt; directory temp cached layers true target stage mirror registry password communication repository repo username user template coming soon! troubleshooting below common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/metadata/",
    "display": "Concepts/Pipeline/Metadata",
    "title": "Metadata",
    "content": "the metadata component part of pipeline for vela. declaration allows extra information to be passed pipeline. fields following are used configure component: name description required template enables compiling as false syntax an example valid declaration: version: &#34;1&#34; +metadata: template: steps: name: test image: golang commands: go ./... build "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/go/mulitline/",
    "display": "Tutorials/Go/Mulitline",
    "title": "Multiline",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from scalars: scalar literals, newlines are preserved below was taken literal example---| //|| /||//|| ||__ information more types of scalars read sample let&rsquo;s take look at using conditional with variable template: metadata:template:truesteps:{{.test}}-name:buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push,pull_request] caller template could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:-name:golangtemplate:name:samplevars:test:| name: testcommands:-gotest./...image:golang:latestpull:alwaysruleset:event:[push,pull_request] which means compiled pipeline execution worker is: version:&#34;1&#34;steps:-name:sample_testcommands:-gotest./...image:golang:latestpull:alwaysruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildimage:golang:latestpull:alwaysruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/stages/needs/",
    "display": "Pipeline/Stages/Needs",
    "title": "Needs",
    "content": "the needs component part of stage for vela. declaration allows you to provide other stages that must complete before starting current one. syntax following an example valid component: version: &#34;1&#34; metadata: template: false stages: test: steps: name: test image: golang commands: go ./... build: needs: build pipeline will execute first, then run stage. "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/tutorials/node/",
    "display": "Plugins/Tutorials/Node",
    "title": "Node.js",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from node.js documentation: as an asynchronous event-driven javascript runtime, designed build scalable network applications. code plugin using node.js, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes http request the provided input: #!/usr/bin/env node const https require(&#34;https&#34;); url require(&#34;url&#34;); // import method parameter environment process.env.parameter_method; body process.env.parameter_body; uri process.env.parameter_url; capture full myurl url.parse(uri); options method: }; new input req https.request(myurl, options); exit immediately if errors req.on(&#34;error&#34;, () =&gt; process.exit(1); }); write req.write(process.env.parameter_body); send req.end(); example of section go-vela/vela-tutorials repository. image once have executable needed accomplish our plugin&rsquo;s task, dockerfile produce should contain script setup run when executed: fromnode:alpinerun apk add --update --no-cache ca-certificatescopy vela-sample.js /bin/vela-sample.jsentrypoint [&#34;node&#34;, &#34;/bin/vela-sample.js&#34;] target/vela-sample docker publishing order pipeline, make sure publish it registry: -t target/vela-sample:node push has added benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written with node.js&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplenodepluginimage:target/vela-sample:nodepull:alwaysparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/secrets/origin/",
    "display": "Pipeline/Secrets/Origin",
    "title": "Origin",
    "content": "the origin component part of secret for vela. declaration allows you to pull secrets from non-internal providers via plugins. see what plugins are supported how they integrate with vela build lifecycle page syntax following an example valid component: version: &#34;1&#34; metadata: template: false secrets: implicit definition. name: vault_token origin: vault external image: target/secret-vault parameters: addr: vault.company.com auth_method: token username: octocat items: source: secret/vela path: user steps: test golang username, password commands: cat /vela/secrets/user/name /vela/secrets/user/password more information on plugin usage docs "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/parameters/",
    "display": "Pipeline/Steps/Parameters",
    "title": "Parameters",
    "content": "the parameters component part of step for vela. declaration allows you to provide extra configuration variables plugin. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: plugin image: target/vela-docker:v0.1.0 pull: always parameters: registry: index.docker.io repo: index.docker.io/octocat/hello-world pipeline will add environment step: parameter_registry=index.docker.io parameter_repo=index.docker.io/octocat/hello-world "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/worker/platform/",
    "display": "Pipeline/Worker/Platform",
    "title": "Platform",
    "content": "the platform component part of template for vela. declaration allows you to route your build single within vela cluster. syntax following an example valid component: version: &#34;1&#34; metadata: template: false worker: platform: docker steps: name: test image: golang commands: go ./... pipeline will start run on worker with available "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/go/vars_platform/",
    "display": "Tutorials/Go/Vars platform",
    "title": "Platform Vars",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview platform variables can be referenced with following syntax: {{ vela &quot;&lt;environment variable&gt;&quot; }} examples &quot;vela_full_repo_name&quot; equates vela_full_repo_name environment variable &quot;full_repo_name&quot; vela_repo_name &quot;vela_build_number&quot; vela_build_number &quot;vela_addr&quot; vela_addr sample let&rsquo;s take look at using template: metadata:template:truesteps:-name:testcommands:-echo{{vela&#34;vela_repo_full_name&#34;}}image:alpinepull:alwaysruleset:event:[push,pull_request] caller of template could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:-name:sampletemplate:name:echo which means compiled pipeline execution worker is: version:&#34;1&#34;steps:-name:sample_echocommands:-echogithub/octocatimage:alpinepull:alwaysruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/starlark/vars_platform/",
    "display": "Tutorials/Starlark/Vars platform",
    "title": "Platform Vars",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview platform variables can be referenced with the following syntax: ctx['vela']['&lt;resource&gt;']['&lt;name&gt;'] examples ctx[&quot;vela&quot;][&quot;repo&quot;][&quot;name&quot;] equates vela_repo_name environment variable ctx[&quot;vela&quot;][&quot;build&quot;][&quot;number&quot;] vela_build_number ctx[&quot;vela&quot;][&quot;system&quot;][&quot;addr&quot;] vela_addr sample let&rsquo;s take look at using within template: def main(ctx): return &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: step(ctx[&#34;vela&#34;][&#34;repo&#34;][&#34;name&#34;]), ], step(name): &#34;name&#34;: &#34;echo %s&#34; name, &#34;image&#34;: &#34;alpine:latest&#34;, &#39;commands&#39;: name caller of template could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.starformat:starlarktype:githubsteps:-name:buildtemplate:name:samplevars: which means compiled pipeline for execution on worker is: version:1steps:-name:sample_echohello-worldimage:alpine:latestcommands:-echohello-world "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/ports/",
    "display": "Pipeline/Services/Ports",
    "title": "Ports",
    "content": "the ports component part of service for vela. declaration allows you to provide list map container pipeline. syntax following an example valid component: version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 ports: &#34;5432:5432&#34; steps: test golang environment: database_driver: database_config: &#39;postgres://postgres@postgres:5432/postgres?sslmode=disable&#39; commands: go ./... pipeline will start first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/privileged/",
    "display": "Pipeline/Steps/Privileged",
    "title": "Privileged",
    "content": "the privileged component part of step for vela. declaration allows you to run container with extra privileges. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang privileged: true commands: go ./... build pipeline will execute first, then step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/pull/",
    "display": "Pipeline/Services/Pull",
    "title": "Pull",
    "content": "the pull component part of service for vela. declaration allows you to control how when vela will attempt image provided service. has default value not_present. means always from its existing cache images. options following are available configure component: name description even if it exists local never assumes already not_present only does not exist on_start waits until right before starting container syntax an example valid version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 pull: steps: test golang environment: database_driver: database_config: &#39;postgres://postgres@postgres:5432/postgres?sslmode=disable&#39; commands: go ./... pipeline start first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/pull/",
    "display": "Pipeline/Steps/Pull",
    "title": "Pull",
    "content": "the pull component part of step for vela. declaration allows you to control how when vela will attempt image provided step. has default value not_present. means always from its existing cache images. options following are available configure component: name description even if it exists local never assumes already not_present only does not exist on_start waits until right before starting container syntax an example valid version: &#34;1&#34; metadata: template: false steps: name: test image: golang pull: commands: go ./... build pipeline execute first, then run "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/pull_policies/",
    "display": "Docs/Usage/Pull policies",
    "title": "Pull Policies",
    "content": "vela provides the ability to define how when images for secrets, steps, services will be retrieved at runtime. usage following pipeline concepts are being used below: pull steps secrets origin note: please warned that declaration not required. if you do provide declaration, default value of not_present used. version: &#34;1&#34; services: name: redis image: redis:latest pull: always steps: check status alpine:latest commands: can use bash commands in-line set override variables export example=&#34;hello world from team&#34; echo ${example} secrets: origin: private vault target/secret-vault:latest on_start vault_token parameters: addr: vault.example.com auth_method: token username: octocat items: source: secret/docker path: docker will: attempt image, even it exists locally only image doesn&rsquo;t already exist wait until right before starting container "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/tutorials/python/",
    "display": "Plugins/Tutorials/Python",
    "title": "Python",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from python documentation: programming language lets you work quickly integrate systems more effectively. code plugin using python, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes an http request the provided input: #!/usr/bin/env import http.client os urlparse method parameter environment os.getenv[&#39;parameter_method&#39;] body os.getenv[&#39;parameter_body&#39;] url os.getenv[&#39;parameter_url&#39;] capture full uri urlparse(url) new connection conn http.client.httpsconnection(uri.hostname, uri.port) headers added {} send conn.request(method, uri.path, body, headers) response conn.getresponse() output print(response.read().decode(&#34;utf-8&#34;)) example of section go-vela/vela-tutorials repository. image once have script needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup run when executed: frompython:alpinerun apk add --update --no-cache ca-certificatescopy vela-sample.py /bin/vela-sample.pyentrypoint [&#34;python&#34;, &#34;/bin/vela-sample.py&#34;] target/vela-sample docker publishing order pipeline, make sure build publish it registry: -t target/vela-sample:python push has benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written with python&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplepythonpluginimage:target/vela-sample:pythonpull:alwaysparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/sdk/python/",
    "display": "Reference/Sdk/Python",
    "title": "Python",
    "content": "overview vela python sdk client to perform operations on objects view content new way integrate into applications. for complete list of apis examples, please take look at the reference documentation. requirements. 2.7 3.4+ get build info example below sample go program demonstrating how authenticate with sdk: from __future__ import print_function time vela.rest apiexception pprint configure api key authorization: apikeyauth configuration vela.configuration() configuration.api_key[&#39;authorization&#39;] &#39;your_api_key&#39; configuration.api_key_prefix[&#39;authorization&#39;] &#39;bearer&#39; endpoint configuration.host &#39;https://your-vela-server.example.com&#39; create an instance class api_instance vela.buildsapi(vela.apiclient(configuration)) try: api_response api_instance.get_builds(org=&#34;go-vela&#34;,repo=&#34;sdk-python&#34;) pprint(api_response) except as e: print(&#34;exception when calling buildsapi-&gt;get_builds: %s n&#34; e) "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/queue/",
    "display": "Infrastructure/Server/Queue",
    "title": "Queue",
    "content": "the queue component one of server components for vela. defines system vela uses publishing workloads to be completed by worker. configuration following options are used configure component: name environment description queue.driver queue_driver type client control operate queue.config queue_config full connection string queue.cluster queue_cluster configures cluster queue.routes queue_routes unique channels all available support vela_* prefixes variables. example: vela_queue_driver drivers documentation redis https://redis.io kafka https://kafka.apache.org not fully supported. using coming soon! limitations these known backups default, does perform any data. currently, functionality considered out scope project should responsibility admins database installation. we recommend reviewing third party tools provided vendor achieve functionality. creation create your system. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/worker/queue/",
    "display": "Infrastructure/Worker/Queue",
    "title": "Queue",
    "content": "the queue component one of worker components for vela. coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/build/remove/",
    "display": "Api/Build/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response github/octocat/1 deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/hook/remove/",
    "display": "Api/Hook/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/hooks/:org/:repo/:hook parameters the following are used to configure endpoint: name description org of organization repo repository hook number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat/1&#34; response github/octocat/1 deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/repo/remove/",
    "display": "Api/Repo/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat&#34; response github/octocat deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/secret/remove/",
    "display": "Api/Secret/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/secrets/:engine/:type/:org/:name/:secret parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat/foo&#34; response repo/github/octocat/foo deleted from native service "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/service/remove/",
    "display": "Api/Service/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build/services/:service parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1&#34; response github/octocat/1/1 deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/step/remove/",
    "display": "Api/Step/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build/steps/:step parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1&#34; response github/octocat/1/1 deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/user/remove/",
    "display": "Api/User/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/users/:user parameters the following are used to configure endpoint: name description user of permissions coming soon! responses status code 200 indicates request has succeeded 401 does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users/octokitty&#34; response octokitty deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/config/remove/",
    "display": "Cli/Config/Remove",
    "title": "Remove",
    "content": "command vela remove config &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: providing will entire configuration file. name description environment variables api.addr removes api address field vela_addr, config_addr api.token.access access token vela_access_token, config_access_token api.token.refresh refresh vela_refresh_token, config_refresh_token api.token vela_token, config_token api.version version vela_api_version, config_api_version log.level log level vela_log_level, config_log_level output vela_output, config_output org vela_org, config_org repo vela_repo, config_repo secret.engine secret engine vela_engine, config_engine secret.type type vela_type, config_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request response "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/repo/remove/",
    "display": "Cli/Repo/Remove",
    "title": "Remove",
    "content": "command vela remove repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;github/octocat&#34; was deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/secret/remove/",
    "display": "Cli/Secret/Remove",
    "title": "Remove",
    "content": "command vela remove secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo response &#34;foo&#34; was deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/repo/repair/",
    "display": "Api/Repo/Repair",
    "title": "Repair",
    "content": "endpoint patch /api/v1/repos/:org/:repo/repair parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/repair&#34; response github/octocat repaired "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/repo/repair/",
    "display": "Cli/Repo/Repair",
    "title": "Repair",
    "content": "command vela repair repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;github/octocat&#34; repaired "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/repo/",
    "display": "Concepts/System/Repo",
    "title": "Repo",
    "content": "the repo component part of core system components for vela. defined as upstream dependency from source control provider used to store code trigger hooks github&rsquo;s repository documentation: like folder your project. project&rsquo;s contains all files stores each file&rsquo;s revision history. you can also discuss manage work within repository. fields following make up component: name type description active bool signifies current status allow_comment enable builds be triggered comment event allow_deploy deployment allow_pull pull_request allow_push push allow_tag tag branch string commit that build clone full url full_name unique (&lt;org&gt;/&lt;repo&gt;) hash secret generated by id int64 identifier link navigatable org private timeout total time allotted per execution trusted enables elevated permissions executed user_id user activated visibility access level required view vela stored configured backend repos table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/admin/repo/",
    "display": "Api/Admin/Repo",
    "title": "Repo",
    "content": "endpoint get /api/v1/admin/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false }, 2, &#34;octokitty&#34;, &#34;github/octokitty&#34;, &#34;https://github.com/github/octokitty&#34;, &#34;https://github.com/github/octokitty.git&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/user/current/repos/",
    "display": "User/Current/Repos",
    "title": "Repos",
    "content": "endpoint get /api/v1/user/source/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/user/source/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false }, 2, &#34;octokitty&#34;, &#34;github/octokitty&#34;, &#34;https://github.com/github/octokitty&#34;, &#34;https://github.com/github/octokitty.git&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/build/restart/",
    "display": "Api/Build/Restart",
    "title": "Restart",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;first commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/build/restart/",
    "display": "Cli/Build/Restart",
    "title": "Restart",
    "content": "command vela restart build &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, build_org repo repository vela_repo, build_repo number vela_build, build_number output format vela_output, build_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response id: repo_id: number: parent: event: push status: created error: &#34;&#34; populates when platform runs into an error with enqueued: 1563474087 created: 1563474086 started: finished: deploy: clone: https://github.com/github/octocat.git source: https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163 title: received from https://github.com/github/octocat message: first commit... commit: 48afb5bdc41ad69bf22588491333f7cf71135163 sender: octokitty author: branch: master ref: refs/heads/master baseref: host: &#34;company.localhost&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/roles/",
    "display": "Docs/Usage/Roles",
    "title": "Roles",
    "content": "warning at time the only source control provider github. so documentation tailored for those users. vela does not maintain any authentication (authn) authorization (authz) internally, but instead inherits its access from (version control) provider. more information on github&rsquo;s model can be found their documentation. platform roles: admin write read roles admins have full when interacting with cli, ui, api. within github organization option to use orgs allow users permissions all repositories org, fine-grained of adding directly individual repositories. role enables repository, which grants following levels resources: repo build step service log secret "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/tutorials/ruby/",
    "display": "Plugins/Tutorials/Ruby",
    "title": "Ruby",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from ruby documentation: is&hellip; dynamic, open source programming language with focus on simplicity productivity. it has an elegant syntax natural read easy write. code plugin using ruby, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes http request the provided input: #!/usr/bin/env require &#39;net/http&#39; &#39;uri&#39; import method parameter environment env[&#39;parameter_method&#39;] body env[&#39;parameter_body&#39;] url env[&#39;parameter_url&#39;] capture full uri uri(url) new client net::http.new(uri.host, uri.port) send response http.send_request( method, uri.path, body, output puts response.read_body example of section go-vela/vela-tutorials repository. image once have script needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup run when executed: fromruby:alpinerun apk add --update --no-cache ca-certificatescopy vela-sample.rb /bin/vela-sample.rbentrypoint [&#34;ruby&#34;, &#34;/bin/vela-sample.rb&#34;] target/vela-sample docker publishing order pipeline, make sure build publish registry: -t target/vela-sample:ruby push added benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written ruby&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplerubypluginimage:target/vela-sample:rubypull:alwaysparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/ruleset/",
    "display": "Pipeline/Steps/Ruleset",
    "title": "Ruleset",
    "content": "the ruleset component part of step for vela. declaration allows you to provide conditions limit execution container. simple fields following are used configure version component: name description required branch build false comment pull request body event path workspace files repo status tag reference target deployment syntax an example valid version: &#34;1&#34; metadata: template: steps: name: test image: golang ruleset: branch: master event: push commands: go ./... pipeline will steps to: builds with advanced continue enables continuing if fails limits all rules must match matcher use when evaluating operator unless can if: unless: also without type appendix rule matching branches. below run stage master: ruleset:branch:[stage,master] events. pull_request: ruleset:event:[push,pull_request] statuses. failure success: ruleset:status:[failure,success] references. ref dev/* test/*: ruleset:tag:[dev/*,test/*] targets. production: ruleset:target:[stage,production] changed repository. file readme.md, any *.md root directory test/* has changed: ruleset:path:[readme.md,&#34;*.md&#34;,&#34;test/*&#34;] comment. extends ability start new through interactions within request. added bottom ruleset:event:[comment]comment:[&#34;run build&#34;] "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/worker/runtime/",
    "display": "Infrastructure/Worker/Runtime",
    "title": "Runtime",
    "content": "the runtime component one of worker components for vela. coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/s3_cache/",
    "display": "Registry/Pipeline/S3 cache",
    "title": "S3 Cache",
    "content": "description plugin enables you to cache build resources an s3 compatible store for vela pipeline. source code: https://github.com/go-vela/vela-s3-cache registry: https://hub.docker.com/r/target/vela-s3-cache usage note: users should refrain from using latest as the tag docker image. it recommended use semantically versioned instead. sample of restoring cache: steps:-name:restore_cacheimage:target/vela-s3-cache:latestpull:alwaysparameters:action:restorebucket:mybucketserver:mybucket.s3-us-west-2.amazonaws.com rebuilding steps:-name:rebuild_cacheimage:target/vela-s3-cache:latestpull:alwaysparameters:action:rebuildbucket:mybucketserver:mybucket.s3-us-west-2.amazonaws.commount:-.gradle flushing steps:-name:flushing_cacheimage:target/vela-s3-cache:latestpull:alwaysparameters:action:flushbucket:mybucketserver:mybucket.s3-us-west-2.amazonaws.com secrets configuring sensitive information your pipeline plain text. internal can substitute these values at runtime: steps: name: restore_cache image: target/vela-s3-cache:latest pull: always secrets: s3_cache_access_key, s3_cache_secret_key parameters: action: restore bucket: mybucket server: mybucket.s3-us-west-2.amazonaws.com access_key: akiaiosfodnn7example secret_key: 123456789qwertyexample example will add step environment variables: s3_cache_access_key=&lt;value&gt; s3_cache_secret_key=&lt;value&gt; external accepts following files authentication: parameter volume configuration access_key /vela/parameters/s3-cache/access_key, /vela/secrets/s3-cache/access_key secret_key /vela/parameters/s3-cache/secret_key, /vela/secrets/s3-cache/secret_key session_token /vela/parameters/s3-cache/session_token, /vela/secrets/s3-cache/session_token read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. bucket with expected be created beforehand. used configure image actions: name required default accelerated_endpoint accelerated instance communicate false n/a parameter_accelerated_endpoint s3_cache_accelerated_endpoint access key communication true parameter_access_key s3_cache_access_key aws_access_key_id action perform against parameter_action s3_cache_action build_branch branch repository by parameter_build_branch vela_build_branch parameter_bucket s3_cache_bucket log_level log level info parameter_log_level s3_cache_log_level org parameter_org vela_repo_org path custom object(s) parameter_path s3_cache_path prefix parameter_prefix s3_cache_prefix repo parameter_repo vela_repo_name repo_branch parameter_repo_branch vela_repo_branch parameter_secret_key aws_secret_access_key server parameter_server s3_cache_server session token parameter_session_token s3_cache_session_token aws_session_token are filename object archive.tgz parameter_filename s3_cache_filename mount directories locations parameter_mount s3_cache_mount timeout call 10m parameter_timeout s3_cache_timeout rebuild flush age delete objects past specific (i.e. 60m, 8h) 336h parameter_age s3_cache_age template coming soon! troubleshooting start tuning logs being displayed: log_level: trace below list common problems how solve them: invalid duration value error may look like this: could not parse &quot;14d &quot; flag flush.age: time: unknown unit &quot;d parsed go&rsquo;s time.parseduration function. only hours, minutes, so on smaller time units supported; days cause unless added subsequent versions go after v1.16, which unlikely. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/secret/",
    "display": "Infrastructure/Server/Secret",
    "title": "Secret",
    "content": "the secret component one of server components for vela. defines system vela uses storing accessing secrets. configuration following options are used to configure component: name environment description vault.driver secret_vault enables vault engine vault.addr secret_vault_addr full navigatable url installation vault.token secret_vault_token token required read/write secrets all available support vela_* prefixes variables. example: vela_secret_vault "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/secret/",
    "display": "Concepts/System/Secret",
    "title": "Secret",
    "content": "the secret component part of core system components for vela. defined as piece sensitive data information that you want to tightly control access to. these are extremely useful when trying avoid providing plain text. they typically include following list some examples secrets: api keys certificates passwords tokens much, much more&hellip; fields make up component: name type description allow_command bool enable injecting with commands declaration events []string permitted id int64 unique identifier images string org from source provider repo team store storage backend value stored configured vela secrets table. types available configure scoped any repository an organization single shared installation accessible by organization. requires have admin repository. installation. unique, because require exist your be member references cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/admin/secret/",
    "display": "Api/Admin/Secret",
    "title": "Secret",
    "content": "endpoint get /api/v1/admin/secrets permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/secrets&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: null, &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] }, 2, &#34;bar&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/secrets/",
    "display": "Pipeline/Steps/Secrets",
    "title": "Secrets",
    "content": "the secrets component part of step for vela. declaration allows you to provide sensitive variables injected into container environment. any variable provided with will be as an upper case variable. simple following example valid syntax version component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang secrets: git_username, git_password commands: echo &#34;machine github.com&#34; &gt; .netrc &#34;login ${git_username}&#34; &#34;password ${git_password}&#34; go ./... build pipeline add environment git_username=&lt;value&gt; git_password=&lt;value&gt; also execute first, then run step. advanced fields are used configure name description required source secret from rename true target inject source: username target: git_username password "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/service/",
    "display": "Concepts/System/Service",
    "title": "Service",
    "content": "the service component part of core system components for vela. defined as detached (headless), execution instruction pipeline. each executed inside an ephemeral docker container starts at beginning fields following make up component: name type description build_id int64 unique identifier build created unix timestamp when was distribution string operating on error message received during time exit_code int return code from finished completed host hostname id image used to create number repo_id repo that triggered runtime with started status signifies end condition stored configured vela backend services table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/admin/service/",
    "display": "Api/Admin/Service",
    "title": "Service",
    "content": "endpoint get /api/v1/admin/services permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/services&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: 1, &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 }, &#34;clone&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/skipping_build/",
    "display": "Docs/Usage/Skipping build",
    "title": "Skipping a Build",
    "content": "to prevent vela from running build for commit, add one of the following your commit title message: [skip ci] [ci skip] vela] [vela ***no_ci*** note: you can use upper lower case. will receive payload source control provider return 200 response with reason why was not triggered. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/source/",
    "display": "Infrastructure/Server/Source",
    "title": "Source",
    "content": "the source component one of server components for vela. defines system vela uses integrating with code. often referred to as version control provider. configuration following options are used configure component: name environment description source.driver source_driver type client operate source.url source_url full navigatable url source.client source_client oauth id source.secret source_secret secret source.context source_context message set commit status all available support vela_* prefixes variables. example: queue vela_source_driver drivers documentation github instance https://github.com/about gitlab https://about.gitlab.com not fully supported. using coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/templates/source/",
    "display": "Pipeline/Templates/Source",
    "title": "Source",
    "content": "the source component part of template for vela. declaration allows you to provide path remote system. syntax following an example valid component: version: &#34;1&#34; metadata: template: false templates name: source: github.com/vela/atlas/cmd type: github steps: test vars: cmd: go ./... build pipeline will execute step first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/start_build/",
    "display": "Docs/Usage/Start build",
    "title": "Start a Build",
    "content": "if you&rsquo;ve followed the documentation for enabling repo wrote pipeline (here are some example pipelines), all that should be left to push your repo. build does not trigger when change repo, check webhook response see there an error. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/step/",
    "display": "Concepts/System/Step",
    "title": "Step",
    "content": "the step component part of core system components for vela. defined as sequential, execution instruction pipeline. each executed inside an ephemeral docker container are always order they defined. fields following make up component: name type description build_id int64 unique identifier build created unix timestamp when was distribution string operating on error message received during time exit_code int return code from finished completed host hostname id image used to create number repo_id repo that triggered runtime with started status signifies end condition stage stored configured vela backend steps table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/admin/step/",
    "display": "Api/Admin/Step",
    "title": "Step",
    "content": "endpoint get /api/v1/admin/steps permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/steps&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: 1, &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; }, &#34;clone&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/stages/steps/",
    "display": "Pipeline/Stages/Steps",
    "title": "Steps",
    "content": "the steps component part of stage for vela. declaration allows you to provide sequential, execution instructions stage. more information, can visit documentation. syntax following an example valid component: version: &#34;1&#34; metadata: template: false stages: test: steps: name: test image: golang commands: go ./... build: build pipeline will execute at same time. "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/environment/substitution/",
    "display": "Reference/Environment/Substitution",
    "title": "Substitution",
    "content": "vela imports substitution library to provide the ability expand, substitute, repository build metadata facilitate dynamic pipeline configurations. string operations syntax description ${var^} var with uppercase first char ${var^^} all ${var,} lowercase ${var,,} ${var:position} substring ${var:position:length} length ${var#substring} find replace ${var##substring} ${var%substring} ${var%%substring} suffix removal ${var/substring/replacement} ${var//substring/replacement} ${var/#substring/replacement} ${var/%substring/replacement} ${#var} ${var=default} default ${var:=default} ${var:-default} escaping tip: expressions are evaluated before yaml parsed. if you do not want system evaluate an expression it must be escaped. version: &#34;1&#34; steps: name: echo commands: does escape evaluation ${vela_build_commit} by adding double &#39;$$&#39; $${vela_build_commit} "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/environment/variables/",
    "display": "Reference/Environment/Variables",
    "title": "Substitution",
    "content": "container defaults the following environment variables are injected into every step, service, secret container. build key value explanation vela_build_author octocat author from source commit vela_build_author_email octocat@github.com email vela_build_base_ref refs/heads/dev reference base vela_build_branch master branch vela_build_channel vela queue channel was published to vela_build_clone https://github.com/octocat/hello-world.git clone url for repository triggered vela_build_commit 7fd1a60b01f91b314f59955a4e4d4e80d8edf11d sha vela_build_created 1556720958 unix timestamp representing creation time vela_build_distribution linux distribution where executed vela_build_enqueued enqueued vela_build_event push webhook event that vela_build_host vela-worker-1 fully qualified domain name of worker on vela_build_link https://vela-server.localhost/octocat/hello-world/1 link ui vela_build_message merge pull request #6 octocat/patch-1 message vela_build_number number vela_build_parent previous vela_build_ref refs/heads/master vela_build_runtime docker runtime vela_build_sender nealcoleman user who vela_build_started 1556730001 start vela_build_source provider repo vela_build_status success status vela_build_title received https://github.com/octocat/hello-world title vela_build_workspace /vela/src/github.com/octocat/hello-world working directory table includes only available during comment vela_build_pull_request populated vela_pull_request deploy vela_build_target production target deployment vela_deployment vela_pull_request_source dev vela_pull_request_target tag vela_build_tag v1.0.0 true vela_addr vela-server.localhost server vela_channel vela_database postgres database connected vela_host vela_queue redis vela_runtime vela_source github vela_version v0.1.0 version vela_workspace /vela/src/github.com/github/octocat/hello-world ci enabled vela_repo_active active setting vela_repo_allow_comment false vela_repo_allow_deploy vela_repo_allow_pull vela_repo_allow_push vela_repo_allow_tag vela_repo_branch default vela_repo_clone vela_repo_full_name octocat/hello-world full vela_repo_link direct vela_repo_name hello-world vela_repo_org org vela_repo_private privacy vela_repo_timeout 30 timeout vela_repo_trusted trusted vela_repo_visibility public visibility vela_user_active vela_user_admin admin platform vela_user_favorites &quot;octocat/hello-world&quot; favorites starred vela_user_name handle step vela_step_created vela_step_distribution vela_step_exit_code exit code when starts vela_step_host vela_step_image target/vela-git:latest image vela_step_name vela_step_number within pipeline vela_step_runtime vela_step_stage stage belongs vela_step_started vela_step_status service vela_service_created vela_service_distribution vela_service_exit_code vela_service_host vela_service_image vela_service_name vela_service_number vela_service_runtime vela_service_started vela_service_status "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/template/",
    "display": "Pipeline/Steps/Template",
    "title": "Template",
    "content": "the template component part of step for vela. declaration allows you to provide name expand pipeline. fields following are used configure component: description required unique identifier pipeline true vars variables injected into false syntax an example valid version: &#34;1&#34; metadata: template: templates name: source: github.com/vela/atlas/cmd type: github steps: test vars: cmd: go ./... build will execute first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/starlark/vars_template/",
    "display": "Tutorials/Starlark/Vars template",
    "title": "Template Vars",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview template variables can be referenced with the following syntax: ctx['vars'][&lt;name&gt;] sample let&rsquo;s take look at using within template: def main(ctx): steps [step(x, ctx[&#34;vars&#34;][&#34;pull_policy&#34;], ctx[&#34;vars&#34;][&#34;commands&#34;]) for ctx[&#34;vars&#34;][&#34;tags&#34;]] pipeline &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: steps, return step(tag, pull_policy, commands): &#34;name&#34;: &#34;build %s&#34; tag, &#34;image&#34;: &#34;golang:%s&#34; &#34;pull&#34;: &#39;commands&#39;: commands.values(), caller of could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.starformat:starlarktype:githubsteps:-name:buildtemplate:name:samplevars:tags:[latest,&#34;1.14&#34;,&#34;1.15&#34;]pull_policy:alwayscommands:test:&#34;go test ./...&#34;build:&#34;go build&#34; which means compiled execution on worker is: version:1steps:-name:sample_buildlatestimage:golang:latestpull:alwayscommands:-gotest./...-gobuild-name:sample_build1.14image:golang:1.14pull:alwayscommands:-gotest./...-gobuild-name:sample_build1.15image:golang:1.15pull:alwayscommands:-gotest./...-gobuild "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/pipeline/templates/",
    "display": "Api/Pipeline/Templates",
    "title": "Templates",
    "content": "endpoint get /api/v1/pipelines/:org/:repo/templates parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider output format pipeline templates permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve configuration 401 user does not have proper 404 500 system error while retrieving sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat/templates&#34; response some_template:link:https://github.com/github/octocat/blob/master/template.ymlname:some_templatesource:github.com/github/octocat/template.ymltype:github{ &#34;some_template&#34;: &#34;link&#34;: &#34;https://github.com/github/octocat/blob/master/template.yml&#34;, &#34;name&#34;: &#34;some_template&#34;, &#34;source&#34;: &#34;github.com/github/octocat/template.yml&#34;, &#34;type&#34;: &#34;github&#34; }, "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/pipeline/terraform/",
    "display": "Registry/Pipeline/Terraform",
    "title": "Terraform",
    "content": "description plugin enables you to run terraform against providers vela pipeline. source code: https://github.com/go-vela/vela-terraform registry: https://hub.docker.com/r/target/vela-terraform usage note: users should refrain from using latest as the tag for docker image. it recommended use semantically versioned instead. sample of adding installing version: steps:-name:applyimage:target/vela-terraform:latestpull:alwaysparameters:action:applyauto_approve:true# required versions 0.12.xversion:0.11.7 init options configuration: 0.12.xinit_options:get_plugins:true applying 0.12.x destroying steps:-name:destroyimage:target/vela-terraform:latestpull:alwaysparameters:action:destroyauto_approve:true# formatting configuration files: steps:-name:fmtimage:target/vela-terraform:latestpull:alwaysparameters:action:fmt planning steps:-name:planimage:target/vela-terraform:latestpull:alwaysparameters:action:plan validating steps:-name:validateimage:target/vela-terraform:latestpull:alwaysparameters:action:validate secrets configuring sensitive information your pipeline plain text. internal can substitute these values at runtime: steps: name: apply image: target/vela-terraform:latest pull: always secrets: terraform_username, terraform_password parameters: action: auto_approve: true username: octocat password: supersecretpassword example will add step environment variables: terraform_username=&lt;value&gt; terraform_password=&lt;value&gt; external accepts following files authentication: parameter volume password /vela/parameters/terraform/password, /vela/secrets/terraform/password username /vela/parameters/terraform/username, /vela/secrets/terraform/username read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. commands be invoked current directory by default. are used configure name default action perform with n/a parameter_action terraform_action init_options operation false parameter_init_options terraform_init_options log_level log level info parameter_log_level terraform_log_level machine netrc communicate github.com parameter_machine terraform_machine vela_netrc_machine authentication parameter_password vela_netrc_password user parameter_username terraform_username vela_netrc_username version cli 0.12.26 parameter_version terraform_version within backend backend_configs merged what force_copy suppress prompts about copying state data from_module copy contents given module into target before initialization get download modules get_plugins missing plugins input ask if not directly lock when locking supported lock_timeout duration retry no_color disables colors output plugin_dirs containing binaries; overrides search paths reconfigure backend, ignoring saved upgrade install allowed configured constraints verify_plugins verify authenticity integrity automatically downloaded command uses defaults overridden config. auto_approve skip interactive approval resources parameter_auto_approve terraform_auto_approve backup path existing parameter_backup terraform_backup parameter_directory terraform_directory parameter_lock terraform_lock parameter_lock_timeout terraform_lock_timeout parameter_no_color terraform_no_color parallelism number concurrent operations walks its graph parameter_parallelism terraform_parallelism refresh update prior checking differences parameter_refresh terraform_refresh save parameter_state terraform_state state_out write updated parameter_state_out terraform_state_out resource parameter_target terraform_target vars map pass (&lt;key&gt;=&lt;value&gt;) parameter_vars terraform_vars var_files list var parameter_var_files terraform_var_files destroy format fmt check validate formatted parameter_check terraform_check diff diffs changes parameter_diff terraform_diff whose differs parameter_list terraform_list result instead stdout parameter_write terraform_write plan managed parameter_destroy terraform_destroy detailed_exit_code return detailed exit codes exits parameter_detailed_exit_code terraform_detailed_exit_code parameter_input terraform_input module_depth specifies depth show parameter_module_depth terraform_module_depth check_variables whether have been specified parameter_check_variables terraform_check_variables template coming soon! troubleshooting start tuning logs being displayed: log_level: trace also instruct verbose logging: environment: tf_log: below common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/secrets/type/",
    "display": "Pipeline/Secrets/Type",
    "title": "Type",
    "content": "the type component part of secret for vela. declaration allows you to provide fetch from storage backend. has default value repo. options following are available configure component: name description org scoped any repository an organization repo single shared installation secrets with accessible by organization. requires have admin access repository. vela installation. these unique, because they require team exist your be member syntax example valid version: &#34;1&#34; metadata: template: false secrets: name: username engine: native key: github/octocat/username type: password github/octocat/password steps: test image: golang username, commands: echo &#34;machine github.com&#34; &gt; .netrc &#34;login ${username}&#34; &#34;password ${password}&#34; go ./... pipeline will allow referenced: also add environment variables step: username=&lt;value&gt; password=&lt;value&gt; "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/templates/type/",
    "display": "Pipeline/Templates/Type",
    "title": "Type",
    "content": "the type component part of template for vela. declaration allows you to provide provided from remote system. options following are available configure component: name description github fetches enterprise instance designed fetch templates enterprise. syntax an example valid version: &#34;1&#34; metadata: template: false name: source: github.com/vela/atlas/cmd type: steps: test vars: cmd: go ./... build pipeline will execute step first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/workspace/",
    "display": "Docs/Usage/Workspace",
    "title": "Understanding the Workspace",
    "content": "vela uses shared volume model between steps to allow file system during the build process. these volumes should be considered ephemeral sense once completes execution all data via being destroyed. working directory ensures configuration, code, dependencies, compiled binaries are persisted steps. default workspace attached every unique matches below pattern: source: syntax /vela/src/&lt;source_provider/&lt;source org&gt;/&lt;source repo&gt; example /vela/src/github.com/go-vela/hello-world secrets: /vela/secrets/&lt;path&gt;/&lt;key&gt; /vela/secrets/github/username/ /vela/secrets/github/password/ parameters: /vela/parameters/&lt;path&gt;/&lt;key&gt; /vela/parameters/github/repo/settings/topics before you use parameters check plugin authors docs ensure it has support read from /vela/parameters would equivalent following docker commands executed: create build-workspace run --volume=build-workspace:/vela/ &lt;image&gt; cloning automatically checks out repository into local that mounted each container. generally referred as workspace, which defines by build. git clone https://github.com/go-vela/hello-world.git &lt;workspace&gt; cases where your needs special configuration add step at beginning of pipeline adding desired behavior. "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/build/update/",
    "display": "Api/Build/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;message&#34;: &#34;this an updated message&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, message&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/hook/update/",
    "display": "Api/Hook/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/hooks/:org/:repo/:hook parameters the following are used to configure endpoint: name description org of organization repo repository hook number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;status&#34;: &#34;failure&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;build_id&#34;: &#34;number&#34;: &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;failure&#34;, &#34;link&#34;: &#34;&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/repo/update/",
    "display": "Api/Repo/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;allow_tag&#34;: true curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_comment&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/secret/update/",
    "display": "Api/Secret/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/secrets/:engine/:type/:org/:name/:secret parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;events&#34;: [&#34;push&#34;, &#34;tag&#34;] curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat/foo&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/service/update/",
    "display": "Api/Service/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo/builds/:build/services/:service parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;status&#34;: &#34;failure&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;failure&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/step/update/",
    "display": "Api/Step/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo/builds/:build/steps/:step parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;status&#34;: &#34;failure&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;failure&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/user/current/update/",
    "display": "User/Current/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/user permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. file &#34;admin&#34;: true curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/user&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/user/update/",
    "display": "Api/User/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/users/:user parameters the following are used to configure endpoint: name description user of permissions coming soon! responses status code 200 indicates request has succeeded 401 does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;admin&#34;: true curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/users/octokitty&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/config/update/",
    "display": "Cli/Config/Update",
    "title": "Update",
    "content": "command vela update config &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables api.addr updates api address field vela_addr, config_addr api.token.access access token vela_access_token, config_access_token api.token.refresh refresh vela_refresh_token, config_refresh_token api.token vela_token, config_token api.version version vela_api_version, config_api_version log.level log level vela_log_level, config_log_level output vela_output, config_output org vela_org, config_org repo vela_repo, config_repo secret.engine secret engine vela_engine, config_engine secret.type type vela_type, config_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request --org github response api: addr: https://vela-server.localhost access_token: supersecretaccesstoken refresh_token: supersecretrefreshtoken version: v1 log: level: info secret: {} org: "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/repo/update/",
    "display": "Cli/Repo/Update",
    "title": "Update",
    "content": "command vela update repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name link full url vela_link, repo_link branch default vela_branch, repo_branch clone vela_clone, repo_clone visibility access level required view vela_visibility, repo_visibility timeout max time allowed per build vela_timeout, repo_timeout private disables public vela_private, repo_private trusted elevates permissions builds vela_trusted, repo_trusted active enables/disables vela_active, repo_active event events trigger vela_events, repo_events output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --event tag response id: userid: org: name: fullname: github/octocat link: https://github.com/github/octocat clone: https://github.com/github/octocat.git branch: master timeout: 60 visibility: private: false trusted: active: true allowpull: allowpush: allowdeploy: allowtag: allowcomment: "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/secret/update/",
    "display": "Cli/Secret/Update",
    "title": "Update",
    "content": "command vela update secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name value vela_value, secret_value image build image(s) access vela_images, secret_images event event(s) vela_events, secret_events commands allows step with vela_commands, secret_commands file secret(s) vela_file, secret_file output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo --value baz response &#34;foo&#34; was updated advanced input from updating single-line multi-line using symbol. syntax @/path/to/file example @$home/tmp/secret.txt secrets multiple filename parameter. -f secret.yml single yaml document ---metadata:version:v1engine:nativesecrets:-org:octocatrepo:githubname:foovalue:bartype:repoimages:-golang:latestevents:-push-pull_request-org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:-golang:latestevents:-push-pull_request ---metadata:version:v1engine:nativesecrets:-org:githubrepo:octocatname:foovalue:bartype:repoimages:-golang:latestevents:-push-pull_request---metadata:version:v1engine:vaultsecrets:-org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:-golang:latestevents:-push-pull_request "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/user/",
    "display": "Concepts/System/User",
    "title": "User",
    "content": "the user component part of core system components for vela. defined as personal account granted to each individual who registers fields following make up component: name type description active bool signifies current status admin enables elevated permissions builds executed repo favorites []string list repos favorited ui hash string unique secret generated by id int64 identifier token access source control provider stored configured vela backend users table. references api "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/admin/user/",
    "display": "Api/Admin/User",
    "title": "User",
    "content": "endpoint get /api/v1/admin/users permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/users&#34; response &#34;id&#34;: 2, &#34;name&#34;: &#34;octocat&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false }, 1, &#34;octokitty&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/environment/",
    "display": "Docs/Usage/Environment",
    "title": "Using the Environment",
    "content": "vela provides the ability to define environment variables scoped individual steps, services secrets. pleas note design be unique per container. does inject variety of default values from build, repo user information. defaults: steps usage following pipeline concepts are being used below: secrets origin note: please warned that ${variable} expressions subject pre-processing. if you do not want pre-processor evaluate your expression it must escaped. version: &#34;1&#34; services: name: redis environment: example: hello, world! image: redis:latest steps: check status commands: can use bash commands in-line set override export example=&#34;hello world team&#34; echo ${example} secrets: origin: private vault target/secret-vault:latest vault_token parameters: addr: vault.example.com auth_method: token username: octocat items: source: secret/docker path: docker "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/pipeline/validate/",
    "display": "Api/Pipeline/Validate",
    "title": "Validate",
    "content": "endpoint post /api/v1/pipelines/:org/:repo/validate parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve validate pipeline configuration templates 401 user does not have proper 404 500 system error while retrieving validating sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x get -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat/validate&#34; response &quot;pipeline valid&quot; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/pipeline/validate/",
    "display": "Cli/Pipeline/Validate",
    "title": "Validate",
    "content": "command vela validate pipeline &lt;parameters...&gt; &lt;arguments...&gt; for more information, please run --help. parameters the following are used to configure command: name description environment variables file of vela_file, pipeline_file path vela_path, pipeline_path permissions coming soon! sample section assumes you have already installed setup cli. install cli, review installation documentation. authentication request response &#34;.vela.yml&#34; valid "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/registry/secret/vault/",
    "display": "Registry/Secret/Vault",
    "title": "Vault",
    "content": "description plugin enables the ability pull secrets from vault into secret mount within vela pipeline. source code: https://github.com/go-vela/secret-vault registry: https://hub.docker.com/r/target/secret-vault usage sample of writing using token authentication: secrets:-origin:name:vaultimage:target/vela/secret-vault:latestparameters:addr:vault.company.comtoken:supersecretvaulttokenauth_method:tokenitems:# written to path: &#34;/vela/secrets/docker/&lt;key&gt;&#34;-source:secret/vela/usernamepath:docker reading ldap secrets: origin: name: image: target/vela/secret-vault:latest parameters: addr: vault.company.com username: octocat password: supersecretpassword token: supersecretvaulttoken auth_method: items: &#34;/vela/secrets/docker/&lt;key&gt;&#34; source: secret/vela/username docker authentication with verbose logging: log_level: trace note: users should refrain configuring sensitive information your pipeline plain text. used must exist as secrets. you can use substitute values at runtime: repo created vault_token example method secret: parameters following are configure name required default addr address instance true n/a auth_method for interfacing (i.e. token, ldap) log_level set log level info password server false username read reading: items pretending perform apply template coming soon! troubleshooting below list common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/version/",
    "display": "Concepts/Pipeline/Version",
    "title": "Version",
    "content": "the version component part of pipeline for vela. declaration allows you to provide syntax used evaluate pipeline. all vela pipelines will require be provided. following an example valid declaration: +version: &#34;1&#34; metadata: template: false steps: name: test image: golang commands: go ./... build "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/build/view/",
    "display": "Api/Build/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;first commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/deployment/view/",
    "display": "Api/Deployment/View",
    "title": "View",
    "content": "endpoint get /api/v1/deployments/:org/:repo/:deployment parameters the following are used to configure endpoint: name description org of organization repo repository deployment number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/deployments/github/octocat/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;url&#34;: &#34;https://api.github.com/repos/github/octocat/deployments/1&#34;, &#34;user&#34;: &#34;octocat&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;ref&#34;: &#34;master&#34;, &#34;task&#34;: &#34;deploy:vela&#34;, &#34;target&#34;: &#34;production&#34;, &#34;description&#34;: &#34;deployment from vela&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/hook/view/",
    "display": "Api/Hook/View",
    "title": "View",
    "content": "endpoint get /api/v1/hooks/:org/:repo/:hook parameters the following are used to configure endpoint: name description org of organization repo repository hook number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;build_id&#34;: &#34;number&#34;: &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;status&#34;: &#34;success&#34;, &#34;link&#34;: &#34;&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/repo/view/",
    "display": "Api/Repo/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/secret/view/",
    "display": "Api/Secret/View",
    "title": "View",
    "content": "endpoint get /api/v1/secrets/:engine/:type/:org/:name/:secret parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat/foo&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/service/view/",
    "display": "Api/Service/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/services/:service parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/step/view/",
    "display": "Api/Step/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/steps/:step parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/user/current/view/",
    "display": "User/Current/View",
    "title": "View",
    "content": "endpoint get /api/v1/user permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/user&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/api/user/view/",
    "display": "Api/User/View",
    "title": "View",
    "content": "endpoint get /api/v1/users/:user parameters the following are used to configure endpoint: name description user of permissions coming soon! responses status code 200 indicates request has succeeded 401 does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users/octokitty&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/build/view/",
    "display": "Cli/Build/View",
    "title": "View",
    "content": "command vela view build &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, build_org repo repository vela_repo, build_repo number vela_build, build_number output format vela_output, build_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response id: repo_id: number: parent: event: push status: created error: &#34;&#34; populates when platform runs into an error with enqueued: 1563474077 created: 1563474076 started: finished: deploy: clone: https://github.com/github/octocat.git source: https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163 title: received from https://github.com/github/octocat message: first commit... commit: 48afb5bdc41ad69bf22588491333f7cf71135163 sender: octokitty author: branch: master ref: refs/heads/master baseref: host: &#34;company.localhost&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/config/view/",
    "display": "Cli/Config/View",
    "title": "View",
    "content": "command vela view config &lt;arguments...&gt; for more information, you can run --help. permissions coming soon! sample section assumes have already installed setup the cli. to install cli, please review installation documentation. authentication request response api: addr: https://vela-server.localhost access_token: supersecretaccesstoken refresh_token: supersecretrefreshtoken version: v1 log: level: info secret: {} "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/deployment/view/",
    "display": "Cli/Deployment/View",
    "title": "View",
    "content": "command vela view deployment &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, deployment_org repo repository vela_repo, deployment_repo number vela_deployment, deployment_number output format vela_output, deployment_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --deployment response id: repo_id: url: https://api.github.com/repos/github/octocat/deployments/1 user: commit: 48afb5bdc41ad69bf22588491333f7cf71135163 ref: master task: deploy:vela target: production description: from "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/hook/view/",
    "display": "Cli/Hook/View",
    "title": "View",
    "content": "command vela view hook &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, hook_org repo repository vela_repo, hook_repo number vela_hook, hook_number output format vela_output, hook_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --hook response id: repo_id: build_id: number: source_id: c8da1302-07d6-11ea-882f-4893bca275b8 created: 1563475419 host: github.com event: push branch: master error: status: success link: https://github.com/github/octocat/settings/hooks/1 "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/log/view/",
    "display": "Cli/Log/View",
    "title": "View",
    "content": "command vela view log &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, log_org repo repository vela_repo, log_repo build number vela_build, log_build service vela_service, log_service step vela_step, log_step output format logs vela_output, log_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build --step response git init initialized empty /vela/src/github.com/github/octocat/.git/ remote add origin https://github.com/github/octocat.git --verbose (fetch) (push) fetch --no-tags refs/heads/master from https://github.com/github/octocat branch master -&gt; fetch_head [new branch] origin/master reset --hard afafce5e33a8efd4340613b31a953107d6dec3a3 head now at afafce5 dummy commit "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/repo/view/",
    "display": "Cli/Repo/View",
    "title": "View",
    "content": "command vela view repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response id: userid: org: name: fullname: github/octocat link: https://github.com/github/octocat clone: https://github.com/github/octocat.git branch: master timeout: 60 visibility: public private: false trusted: active: true allowpull: allowpush: allowdeploy: allowtag: allowcomment: "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/secret/view/",
    "display": "Cli/Secret/View",
    "title": "View",
    "content": "command vela view secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo response id: org: repo: team: &#34;&#34; name: value: type: images: null events: push pull_request "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/service/view/",
    "display": "Cli/Service/View",
    "title": "View",
    "content": "command vela view service &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, service_org repo repository vela_repo, service_repo build number vela_build, service_build vela_service, service_number output format vela_output, service_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build --service response id: build_id: repo_id: number: name: clone status: success error: &#34;&#34; exitcode: created: 1561748980 started: 1561748979 finished: 1561748981 host: &#34;worker.host.com&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/reference/cli/step/view/",
    "display": "Cli/Step/View",
    "title": "View",
    "content": "command vela view step &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, step_org repo repository vela_repo, step_repo build number vela_build, step_build vela_step, step_number output format vela_output, step_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build --step response id: build_id: repo_id: number: name: clone status: success error: &#34;&#34; populates when platform runs into an error with exitcode: created: 1561748980 started: 1561748979 finished: 1561748981 host: &#34;worker.host.com&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/plugin/",
    "display": "Docs/Usage/Plugin",
    "title": "Working with plugins",
    "content": "note: the following plugins are used within example kaniko vault typically, configured as step pipeline should accept their configuration via environment variables. below shows secret plugin working together to publish an image registry: version:&#34;1&#34;steps:-name:pluginimage:target/vela-dockerpull:alwaysparameters:registry:index.docker.iorepo:index.docker.io/octocat/hello-worldsecrets:-name:vault_token-origin:name:pluginimage:target/secret-vaultpull:alwayssecrets:[vault_token]parameters:addr:vault.company.comauth_method:tokenitems:-source:secret/dockerpath:docker we pass these variables vela using parameters block. any variable passed block, will be injected into parameter_&lt;variable&gt;: version: &#34;1&#34; steps: name: docker image: target/vela-docker pull: always parameters: index.docker.io repo: index.docker.io/octocat/hello-world secrets: vault_token origin: target/secret-vault addr: vault.company.com auth_method: token items: source: secret/docker path: from above example, would added containers: docker: parameter_registry=index.docker.io parameter_repo=index.docker.io/octocat/hello-world vault: parameter_addr=index.docker.io parameter_auth_method=index.docker.io/octocat/hello-world parameter_items={&quot;items&quot;: [{&quot;source&quot;: &quot;secret/docker&quot;}],&quot;path&quot;: &quot;docker&quot;} "
    }

]}
